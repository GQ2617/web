import{_ as s,c as n,o as a,d as l}from"./app.c282a12f.js";const C=JSON.parse('{"title":"instanceof","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-概述","slug":"_01-概述","link":"#_01-概述","children":[]},{"level":2,"title":"02-代码实现","slug":"_02-代码实现","link":"#_02-代码实现","children":[]}],"relativePath":"Web/tools/对象相关/自定义instanceof.md"}'),o={name:"Web/tools/对象相关/自定义instanceof.md"},p=l(`<h1 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-hidden="true">#</a></h1><h2 id="_01-概述" tabindex="-1">01-概述 <a class="header-anchor" href="#_01-概述" aria-hidden="true">#</a></h2><ul><li>语法：myInstanceof(obj,Type)</li><li>功能：判断obj是否是Type类型的实例</li><li>实现：Type的原型对象是否是obj原型链上的某个对象</li></ul><h2 id="_02-代码实现" tabindex="-1">02-代码实现 <a class="header-anchor" href="#_02-代码实现" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myInstanceOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">Type</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">protoObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">protoObj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">protoObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">protoObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">protoObj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">___proto__</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,5),e=[p];function t(c,r,i,y,F,D){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
