import{_ as p,c as t,o as r,d as e}from"./app.c282a12f.js";const S=JSON.parse('{"title":"计算机网络(二)","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-如何利用UDP实现可靠传输？","slug":"_01-如何利用udp实现可靠传输","link":"#_01-如何利用udp实现可靠传输","children":[]},{"level":2,"title":"02-说一说你对IP分类的了解","slug":"_02-说一说你对ip分类的了解","link":"#_02-说一说你对ip分类的了解","children":[]},{"level":2,"title":"03-IP为什么要分类？","slug":"_03-ip为什么要分类","link":"#_03-ip为什么要分类","children":[]},{"level":2,"title":"04-IPV4和IPV6有什么区别？","slug":"_04-ipv4和ipv6有什么区别","link":"#_04-ipv4和ipv6有什么区别","children":[]},{"level":2,"title":"05-说一下http和https的区别。","slug":"_05-说一下http和https的区别。","link":"#_05-说一下http和https的区别。","children":[]},{"level":2,"title":"06-https为什么采用混合加密机制？","slug":"_06-https为什么采用混合加密机制","link":"#_06-https为什么采用混合加密机制","children":[]},{"level":2,"title":"07-HTTP1.1和HTTP2.0有什么区别？","slug":"_07-http1-1和http2-0有什么区别","link":"#_07-http1-1和http2-0有什么区别","children":[]}],"relativePath":"Computer/计算机网络/计算机网络(二).md"}'),i={name:"Computer/计算机网络/计算机网络(二).md"},l=e('<h1 id="计算机网络-二" tabindex="-1">计算机网络(二) <a class="header-anchor" href="#计算机网络-二" aria-hidden="true">#</a></h1><h2 id="_01-如何利用udp实现可靠传输" tabindex="-1">01-如何利用UDP实现可靠传输？ <a class="header-anchor" href="#_01-如何利用udp实现可靠传输" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><ol><li><p>实现方法：</p><p>（1）将实现放到应用层，然后类似于TCP，实现确认机制、重传机制和窗口确认机制；</p><p>（2）给数据包进行编号，按顺序接收并存储，接收端收到数据包后发送确认信息给发送端，发送端接收到确认信息后继续发送，若接收端接收的数据不是期望的顺序编号，则要求重发；（主要解决丢包和包无序的问题）</p></li><li><p>已经实现的可靠UDP：</p><p>（1）RUDP 可靠数据报传输协议；</p><p>（2）RTP 实时传输协议</p><p>为数据提供了具有实时特征的端对端传送服务；例如：组播或单播网络服务下的交互式视频、音频或模拟数据。</p><p>（3）UDT</p><p>基于UDP的数据传输协议，是一种互联网传输协议； 主要目的是支持高速广域网上的海量数据传输，引入了新的拥塞控制和数据可靠性控制机制（互联网上的标准数据传输协议TCP在高带宽长距离的网络上性能很差）；</p></li></ol><p>UDT是面向连接的双向的应用层协议，同时支持可靠的数据流传输和部分可靠的数据报服务；</p><p>应用：高速数据传输，点到点技术(P2P)，防火墙穿透，多媒体数据传输；</p><h2 id="_02-说一说你对ip分类的了解" tabindex="-1">02-说一说你对IP分类的了解 <a class="header-anchor" href="#_02-说一说你对ip分类的了解" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><p><img src="https://uploadfiles.nowcoder.com/images/20220224/4107856_1645697869711/3A1B72345635FE06A1B8B82672EEA03C" alt="img"></p><p>​ 五类互联网地址</p><p>IP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。 全0和全1的都保留不用。</p><ol><li>A类：(1.0.0.0-126.0.0.0)（默认子网掩码：255.0.0.0或 0xFF000000）第一个字节为网络号，后三个字节为主机号。该类IP地址的最前面为“0”，所以地址的网络号取值于1~126之间。一般用于大型网络。</li><li>B类：(128.0.0.0-191.255.0.0)（默认子网掩码：255.255.0.0或0xFFFF0000）前两个字节为网络号，后两个字节为主机号。该类IP地址的最前面为“10”，所以地址的网络号取值于128~191之间。一般用于中等规模网络。</li><li>C类：(192.0.0.0-223.255.255.0)（子网掩码：255.255.255.0或 0xFFFFFF00）前三个字节为网络号，最后一个字节为主机号。该类IP地址的最前面为“110”，所以地址的网络号取值于192~223之间。一般用于小型网络。</li><li>D类：是多播地址。该类IP地址的最前面为“1110”，所以地址的网络号取值于224~239之间。一般用于多路广播用户 。</li><li>E类：是保留地址。该类IP地址的最前面为“1111”，所以地址的网络号取值于240~255之间。</li></ol><h2 id="_03-ip为什么要分类" tabindex="-1">03-IP为什么要分类？ <a class="header-anchor" href="#_03-ip为什么要分类" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><p>根据IP地址访问终端是通过路由器，路由设备当中有一张路由表，该路由表记录了所有IP地址的位置，这样就可以进行包的转发了，如果我们不区分网络地址，那么这张路由表当中就要保存有所有IP地址的方向，这张路由表就会很大，就像下面说的那样：如果不分网络位和主机位，路由器的路由表就是都是32位的地址，那所有的路由器维护的路由表会很大，转发速度会变慢（因为查询变慢）。而且所有的路由器都要有全Internet的地址，所有人的路由器都要有足够的性能来存下全网地址。估计建造这样的Internet成本是现在的几万倍，甚至更高。</p><p><strong>有了网络地址，就可以限定拥有相同网络地址的终端都在同一个范围内，那么路由表只需要维护这个网络地址的方向，就可以找到相应的终端了。</strong></p><h2 id="_04-ipv4和ipv6有什么区别" tabindex="-1">04-IPV4和IPV6有什么区别？ <a class="header-anchor" href="#_04-ipv4和ipv6有什么区别" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><p>IPv4和IPv6是是目前使用的两种Internet协议版本，IPv4和IPv6协议之间存在各种差异，包括它们的功能，但关键的一点是它生成的地址（地址空间）的数量的区别。</p><ol><li><p>协议地址的区别</p><p>（1）地址长度</p><p>IPv4协议具有32位（4字节）地址长度；IPv6协议具有128位（16字节）地址长度。</p><p>（2）地址的表示方法</p><p>IPv4地址是以小数表示的二进制数。 IPv6地址是以十六进制表示的二进制数。</p><p>（3）地址配置</p><p>IPv4协议的地址可以通过手动或DHCP配置的。</p><p>IPv6协议需要使用Internet控制消息协议版本6（ICMPv6）或DHCPv6的无状态地址自动配置（SLAAC）。</p></li><li><p>数据包的区别</p><p>（1）包的大小</p><p>IPv4协议的数据包需要576个字节，碎片可选 ；IPv6协议的数据包需要1280个字节，不会碎片。</p><p>（2）包头</p><p>IPv4协议的包头的长度为20个字节，不识别用于QoS处理的数据包流，包含checksum，包含最多40个字节的选项字段。</p><p>IPv6协议的包头的长度为40个字节，包含指定QoS处理的数据包流的Flow Label字段，不包含checksum；IPv6协议没有字段，但IPv6扩展标头可用。</p><p>（3）数据包碎片</p><p>IPv4协议的数据包碎片会由转发路由器和发送主机完成。IPv6协议的数据包碎片仅由发送主机完成。</p></li><li><p>DNS记录</p><p>IPv4协议的地址（A）记录，映射主机名；指针（PTR）记录，IN-ADDR.ARPA DNS域。</p><p>IPv6协议的地址（AAAA）记录，映射主机名；指针（PTR）记录，IP6.ARPA DNS域</p></li><li><p>IPSec支持</p><p>IPv4协议的IPSec支持只是可选的；IPv6协议有内置的IPSec支持。</p></li><li><p>地址解析协议</p><p>IPv4协议：地址解析协议（ARP）可用于将IPv4地址映射到MAC地址。</p><p>IPv6协议：地址解析协议（ARP）被邻居发现协议（NDP）的功能所取代。</p></li><li><p>身份验证和加密</p><p>Pv6提供身份验证和加密；但IPv4不提供。</p></li></ol><h2 id="_05-说一下http和https的区别。" tabindex="-1">05-说一下http和https的区别。 <a class="header-anchor" href="#_05-说一下http和https的区别。" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><p>https和https主要存在以下的区别：</p><ol><li>HTTPS 协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)</li><li>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</li><li>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</li></ol><p><strong>答案解析</strong></p><ol><li><p><strong>超文本传输协议</strong>（HTTP，HyperText Transfer Protocol）是互联网上应用最为广泛的一种网络协议。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。它可以使浏览器更加高效。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</p></li><li><p><strong>HTTP原理</strong></p><p>（1）客户端的浏览器首先要通过网络与服务器建立连接，该连接是通过 TCP 来完成的，一般 TCP 连接的端口号是80。 建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和许可内容。</p><p>（2）服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</p></li><li><p><strong>HTTPS</strong>（Hyper Text Transfer Protocol over SecureSocket Layer）是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p></li><li><p><strong>HTTPS的工作原理</strong></p><p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p><p><img src="https://uploadfiles.nowcoder.com/images/20220224/4107856_1645697886891/B7268EF66524898CEF0E068EA5F1BA26" alt="img"></p><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图上图所示：</p><p>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p><p>（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p><p>（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p><p>（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p><p>（5）Web服务器利用自己的私钥解密出会话密钥。</p><p>（6）Web服务器利用会话密钥加密与客户端之间的通信。</p></li><li><p><strong>HTTPS的优点</strong></p><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p><p>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><p>（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p></li><li><p><strong>HTTPS的缺点</strong></p><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p><p>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p></li></ol><h2 id="_06-https为什么采用混合加密机制" tabindex="-1">06-https为什么采用混合加密机制？ <a class="header-anchor" href="#_06-https为什么采用混合加密机制" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><p>一方面，第一阶段的非对称加密，保证了对称密钥的安全性；另一方面，第二阶段的对称加密，可以提高加密/解密处理的速度，提高数据传输的效率。</p><p><strong>答案解析</strong></p><ol><li><p><strong>为什么需要加密？</strong></p><p>因为http的内容是明文传输的，明文数据会经过中间代理服务器、路由器、wifi热点、通信服务运营商等多个物理节点，如果信息在传输过程中被劫持，传输的内容就完全暴露了，他还可以篡改传输的信息且不被双方察觉，这就是<strong>中间人攻击</strong>。所以我们才需要对信息进行加密。最简单容易理解的就是<strong>对称加密</strong>。</p></li><li><p><strong>什么是对称加密？</strong></p><p>就是有一个密钥，它可以对一段内容加密，加密后只能用它才能解密看到原本的内容，和我们日常生活中用的钥匙作用差不多。</p></li><li><p><strong>用对称加密可行吗？</strong></p><p><strong>如果通信双方都各自持有同一个密钥，且没有别人知道，这两方的通信安全当然是可以被保证的（除非密钥被破解）。<strong>然而最大的问题就是</strong>这个密钥怎么让传输的双方知晓，同时不被别人知道</strong>。如果由服务器生成一个密钥并传输给浏览器，那这个传输过程中密钥被别人劫持弄到手了怎么办？之后他就能用密钥解开双方传输的任何内容了，所以这么做当然不行。 换种思路？试想一下，如果浏览器内部就预存了网站A的密钥，且可以确保除了浏览器和网站A，不会有任何外人知道该密钥，那理论上用对称加密是可以的，这样浏览器只要预存好世界上所有HTTPS网站的密钥就行啦！这么做显然不现实。 所以我们就需要神奇的<strong>非对称加密</strong>。</p></li><li><p><strong>什么是非对称加密？</strong></p><p>有两把密钥，通常一把叫做公钥、一把叫做私钥，用公钥加密的内容必须用私钥才能解开，同样，私钥加密的内容只有公钥能解开。</p></li><li><p><strong>用非对称加密可行吗？</strong> 鉴于非对称加密的机制，我们可能会有这种思路：服务器先把公钥直接明文传输给浏览器，之后浏览器向服务器传数据前都先用这个公钥加密好再传，这条数据的安全似乎可以保障了！<strong>因为只有服务器有相应的私钥能解开这条数据</strong>。 然而<strong>由服务器到浏览器的这条路怎么保障安全？<strong>如果服务器用它的的私钥加密数据传给浏览器，那么浏览器用公钥可以解密它，而这个公钥是一开始通过明文传输给浏览器的，这个公钥被谁劫持到的话，他也能用该公钥解密服务器传来的信息了。所以</strong>目前似乎只能保证由浏览器向服务器传输数据时的安全性</strong>（其实仍有漏洞，下文会说）。</p></li><li><p><strong>混合加密</strong></p><p>非对称加密耗时，非对称加密+对称加密结合可以吗？而且得尽量减少非对称加密的次数。当然是可以的，而且非对称加密、解密各只需用一次即可。以下就是加密过程：</p><p>（1）某网站拥有用于非对称加密的公钥A、私钥A’。</p><p>（2）浏览器像网站服务器请求，服务器把公钥A明文给传输浏览器。</p><p>（3）浏览器随机生成一个用于对称加密的密钥X，用公钥A加密后传给服务器。</p><p>（4）服务器拿到后用私钥A’解密得到密钥X。</p><p>（5）这样双方就都拥有密钥X了，且别人无法知道它。之后双方所有数据都用密钥X加密解密。</p><p>完美！HTTPS基本就是采用了这种方案。</p></li></ol><h2 id="_07-http1-1和http2-0有什么区别" tabindex="-1">07-HTTP1.1和HTTP2.0有什么区别？ <a class="header-anchor" href="#_07-http1-1和http2-0有什么区别" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><ol><li><p>HTTP2.0使用了<strong>多路复用</strong>的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。</p></li><li><p>在HTTP1.1中，HTTP请求和响应都是由状态行、请求/响应头部、消息主体三部分组成。一般而言，消息主体都会经过gzip压缩，或者本身传输的就是压缩过后的二进制文件，但状态行和头部却没有经过任何压缩，直接以纯文本传输。随着Web功能越来越复杂，每个页面产生的请求数也越来越多，导致消耗在头部的流量越来越多，尤其是每次都要传输UserAgent、Cookie这类不会频繁变动的内容，完全是一种浪费。 <strong>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</strong></p></li><li><p>服务端推送是一种在客户端请求之前发送数据的机制。网页使用了许多资源：HTML、样式表、脚本、图片等等。在HTTP1.1中这些资源每一个都必须明确地请求。这是一个很慢的过程。浏览器从获取HTML开始，然后在它解析和评估页面的时候，增量地获取更多的资源。因为服务器必须等待浏览器做每一个请求，网络经常是空闲的和未充分使用的。</p><p><strong>为了改善延迟，HTTP2.0引入了server push</strong>，它允许服务端推送资源给浏览器，在浏览器明确地请求之前，免得客户端再次创建连接发送请求到服务器端获取。这样客户端可以直接从本地加载这些资源，不用再通过网络。</p></li></ol>',34),s=[l];function o(P,n,T,h,a,g){return r(),t("div",null,s)}const _=p(i,[["render",o]]);export{S as __pageData,_ as default};
