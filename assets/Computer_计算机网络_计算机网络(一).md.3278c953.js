import{_ as p,c as t,o as r,d as n}from"./app.c282a12f.js";const _=JSON.parse('{"title":"计算机网络(一)","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-请介绍七层网络体系结构","slug":"_01-请介绍七层网络体系结构","link":"#_01-请介绍七层网络体系结构","children":[]},{"level":2,"title":"02-请介绍五层网络体系结构","slug":"_02-请介绍五层网络体系结构","link":"#_02-请介绍五层网络体系结构","children":[]},{"level":2,"title":"03-讲一下TCP/IP协议","slug":"_03-讲一下tcp-ip协议","link":"#_03-讲一下tcp-ip协议","children":[]},{"level":2,"title":"04-IP协议包含哪些字段？","slug":"_04-ip协议包含哪些字段","link":"#_04-ip协议包含哪些字段","children":[]},{"level":2,"title":"05-介绍一下tcp的三次握手","slug":"_05-介绍一下tcp的三次握手","link":"#_05-介绍一下tcp的三次握手","children":[]},{"level":2,"title":"06-介绍一下tcp的四次挥手","slug":"_06-介绍一下tcp的四次挥手","link":"#_06-介绍一下tcp的四次挥手","children":[]},{"level":2,"title":"07-为什么需要四次挥手？","slug":"_07-为什么需要四次挥手","link":"#_07-为什么需要四次挥手","children":[]}],"relativePath":"Computer/计算机网络/计算机网络(一).md"}'),l={name:"Computer/计算机网络/计算机网络(一).md"},i=n('<h1 id="计算机网络-一" tabindex="-1">计算机网络(一) <a class="header-anchor" href="#计算机网络-一" aria-hidden="true">#</a></h1><h2 id="_01-请介绍七层网络体系结构" tabindex="-1">01-请介绍七层网络体系结构 <a class="header-anchor" href="#_01-请介绍七层网络体系结构" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><ol><li><p>为什么分七层</p><p>支持异构网络的互联互通。</p></li><li><p>七层分别负责的内容（功能）</p><p>OSI 模型把网络通信的工作分为 7 层，从下到上分别是<strong>物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</strong>。</p><p>(1) 物理层</p><p>任务：透明地传输比特流。</p><p>功能：为数据段设备提供传送数据通路</p><p>传输单位：比特</p><p>所实现的硬件：集线器，中继器</p><p>（2）数据链路层</p><p>任务：将网络层传输下来的IP数据报组装成帧</p><p>功能：a. 链路连接的建立、拆除和分离</p><p>​ b. 帧定界和帧同步</p><p>​ c.差错检测</p><p>传输单位：帧</p><p>所实现的硬件：交换机、网桥</p><p>协议：PPP,HDLC、SDLC、STP、ARQ</p><p>(3)网络层</p><p>任务：a. 将传输层传下来的报文段封装成分组</p><p>​ b.选择合适的路由，使得传输层传下来的分组能够交付到目的主机</p><p>功能：a. 为传输层提供服务</p><p>​ b. 组包和拆包</p><p>​ c. 路由选择</p><p>​ d.拥塞控制</p><p>传输单位：数据段</p><p>所实现的硬件：路由器</p><p>协议：ICMP、ARP、RARP、IP、IGMP、OSPF</p><p>(4)传输层</p><p>任务：负责主机中两个进程之间的通信</p><p>功能：</p><p>​ a. 为端到端连接提供可靠的服务</p><p>​ b. 为端到端连接提供流量控制、差错控制、服务质量等管理服务</p><p>传输单位：报文段（TCP）或用户数据报（UDP）</p><p>协议：TCP、UDP</p><p>(5)会话层</p><p>任务：不同主机上各进程间的对话</p><p>功能：管理主机间的会话进程，包括建立、管理以及终止进程间的会话。是一种端到端的服务</p><p>(6)表示层</p><p>负责处理在两个内部数据表示结构不同的通信系统之间交换信息的表示格式，为数据加密和解密以及为提高传输效率提供必需的数据压缩以及解压等功能。</p><p>(7)应用层</p><p>任务：提供系统与用户的接口</p><p>功能：</p><p>​ a.文件传输</p><p>​ b. 访问和管理</p><p>​ c. 电子邮件服务</p><p>协议：FTP、SMTP、POP3、HTTP、DNS、TELnet</p></li></ol><h2 id="_02-请介绍五层网络体系结构" tabindex="-1">02-请介绍五层网络体系结构 <a class="header-anchor" href="#_02-请介绍五层网络体系结构" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><p>五层网络体系结构分分别为：<strong>应用层、运输层、网络层、数据链路层、物理层</strong>。各层功能分别如下：</p><ol><li><p>第五层——<strong>应用层</strong>(application layer)</p><p>(1) 应用层(application layer)：是体系结构中的最高。直接为用户的应用进程提供服务。</p><p>(2) 在因特网中的应用层协议很多，如支持万维网应用的HTTP协议，支持电子邮件的SMTP协议，支持文件传送的FTP协议等等。</p></li><li><p>第四层——<strong>运输层</strong>(transport layer)</p><p>(1) 运输层(transport layer)：负责向两个主机中进程之间的通信提供服务。由于一个主机可同时运行多个进程，因此运输层有<strong>复用</strong>和<strong>分用</strong>的功能。</p><p>a. 复用，就是多个应用层进程可同时使用下面运输层的服务。</p><p>b. 分用，就是把收到的信息分别交付给上面应用层中相应的进程。</p><p>(2) <strong>运输层主要使用以下两种协议：</strong> **(1) 传输控制协议TCP(Transmission Control Protocol)：**面向连接的，数据传输的单位是报文段，能够提供可靠的交付。 **(2) 用户数据包协议UDP(User Datagram Protocol)：**无连接的，数据传输的单位是用户数据报，不保证提供可靠的交付，只能提供“尽最大努力交付”。</p></li><li><p>第三层——<strong>网络层</strong>(network layer)</p><p>网络层(network layer)主要包括以下两个任务：</p><p>(1) 负责为分组交换网上的不同主机提供通信服务。在发送数据时，网络层把运输层残生的报文段或用户数据报封装成分组或包进行传送。在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫做IP数据报，或简称为数据报。</p><p>(2) 选中合适的路由，使源主机运输层所传下来的分组，能够通过网络中的路由器找到目的主机。</p></li><li><p>第二层——<strong>数据链路层</strong>(data link layer)</p><p>**数据链路层(data link layer)：**常简称为链路层，我们知道，两个主机之间的数据传输，总是在一段一段的链路上传送的，也就是说，在两个相邻结点之间传送数据是直接传送的(点对点)，这时就需要使用专门的链路层的协议。</p><p>在两个相邻结点之间传送数据时，数据链路层将网络层交下来的IP数据报组装成帧(framing)，在两个相邻结点之间的链路上“透明”地传送帧中的数据。</p><p>每一帧包括数据和必要的控制信息(如同步信息、地址信息、差错控制等)。典型的帧长是几百字节到一千多字节。</p><p><strong>注意</strong>：”透明”是一个很重要的术语。它表示，某一个实际存在的事物看起来却好像不存在一样。”在数据链路层透明传送数据”表示无力什么样的比特组合的数据都能够通过这个数据链路层。因此，对所传送的数据来说，这些数据就“看不见”数据链路层。或者说，数据链路层对这些数据来说是透明的。 (1) 在接收数据时，控制信息使接收端能知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提取出数据部分，上交给网络层。 (2) 控制信息还使接收端能检测到所收到的帧中有无差错。如发现有差错，数据链路层就简单地丢弃这个出了差错的帧，以免继续传送下去白白浪费网络资源。如需改正错误，就由运输层的TCP协议来完成。</p></li><li><p>第一层——<strong>物理层</strong>(physical layer)</p><p>**物理层(physical layer)：**在物理层上所传数据的单位是比特。物理层的任务就是透明地传送比特流。</p></li></ol><h2 id="_03-讲一下tcp-ip协议" tabindex="-1">03-讲一下TCP/IP协议 <a class="header-anchor" href="#_03-讲一下tcp-ip协议" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><ol><li><p>TCP/IP协议定义</p><p><strong>TCP/IP</strong>（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。</p></li><li><p>TCP/IP协议组成</p><p>TCP/IP结构模型分为**应用层、传输层、网络层、链路层（网络接口层）**四层，以下是各层的详细介绍：</p><p><strong>（1）应用层</strong></p><p>应用层是TCP/IP协议的第一层，是直接为应用进程提供服务的。</p><p>a. 对不同种类的应用程序它们会根据自己的需要来使用应用层的不同协议，邮件传输应用使用了SMTP协议、万维网应用使用了HTTP协议、远程登录服务应用使用了有TELNET协议。</p><p>b. 应用层还能加密、解密、格式化数据。</p><p>c. 应用层可以建立或解除与其他节点的联系，这样可以充分节省网络资源。</p><p><strong>（2）传输层</strong></p><p>作为TCP/IP协议的第二层，运输层在整个TCP/IP协议中起到了中流砥柱的作用。且在运输层中，TCP和UDP也同样起到了中流砥柱的作用。</p><p><strong>（3）网络层</strong></p><p>网络层在TCP/IP协议中的位于第三层。在TCP/IP协议中网络层可以进行网络连接的建立和终止以及IP地址的寻找等功能。</p><p><strong>（4）链路层（网络接口层）</strong></p><p>在TCP/IP协议中，网络接口层位于第四层。由于网络接口层兼并了物理层和数据链路层。所以，网络接口层既是传输数据的物理媒介，也可以为网络层提供一条准确无误的线路。</p></li><li><p>TCP/IP协议特点</p><p>TCP/IP协议能够迅速发展起来并成为事实上的标准，是它恰好适应了世界范围内数据通信的需要。它有以下特点：</p><p>（1）协议标准是完全开放的，可以供用户免费使用，并且独立于特定的计算机硬件与操作系统；</p><p>（2）独立于网络硬件系统，可以运行在广域网，更适合于互联网；</p><p>（3）网络地址统一分配，网络中每一设备和终端都具有一个唯一地址；</p><p>（4）高层协议标准化，可以提供多种多样可靠网络服务。</p></li></ol><h2 id="_04-ip协议包含哪些字段" tabindex="-1">04-IP协议包含哪些字段？ <a class="header-anchor" href="#_04-ip协议包含哪些字段" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p><strong>IP协议包含字段如下：</strong></p><ul><li><strong>4位版本号</strong>：指定IP协议的版本，对于IPv4来说就是4</li><li><strong>4位头部长度</strong>：IP头部长度有多少个4字节，所以头部最大长度就是15*4=60字节</li><li><strong>8位服务类型</strong>：3位优先权(已弃用)，4位TOS字段，1位保留字段(必须设置为0)。4为TOS为：最小延时，最大吞吐量，最高可靠性，最小成本，这四个只能选择一个</li><li><strong>16位总长度</strong>：IP数据报整体占多少字节</li><li><strong>16为标识</strong>：唯一的标识主机发送的报文，IP报文在数据链路层被分片，那么每一个片中的标识都是相同的</li><li><strong>3位标志字段</strong>：第一位保留，第二位置1表示进制分片(报文长度超过MTU，丢弃报文)，第三位更多分片，最后一个分片是1，其他是0</li><li><strong>13位分片偏移</strong>：相对于原始IP报文开始处的偏移</li><li><strong>8位生存时间</strong>：数据报到达目的地的最大报文跳数，每经过一个路由，TTL-=1，一直到0都没有到达目的地，报文丢弃。</li><li><strong>8位协议</strong>：表示上层协议类型，把IP交给TCP还是UDP，其中ICMP是1，TCP是6，UDP是17</li><li><strong>16位头部校验和</strong>：使用CRC校验，鉴别头部是否损坏</li><li><strong>32位源地址和32位目标地址</strong>：表示发送端和接收端</li></ul><h2 id="_05-介绍一下tcp的三次握手" tabindex="-1">05-介绍一下tcp的三次握手 <a class="header-anchor" href="#_05-介绍一下tcp的三次握手" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><ol><li>第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入<strong>SYN_SENT</strong>状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入<strong>SYN_RECV</strong>状态；</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入<strong>ESTABLISHED</strong>（TCP连接成功）状态，完成三次握手。</li></ol><h2 id="_06-介绍一下tcp的四次挥手" tabindex="-1">06-介绍一下tcp的四次挥手 <a class="header-anchor" href="#_06-介绍一下tcp的四次挥手" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li><li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</li><li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li></ol><h2 id="_07-为什么需要四次挥手" tabindex="-1">07-为什么需要四次挥手？ <a class="header-anchor" href="#_07-为什么需要四次挥手" aria-hidden="true">#</a></h2><p><strong>参考回答</strong></p><ol><li><p>四次挥手示意图</p><p><img src="https://uploadfiles.nowcoder.com/images/20220224/4107856_1645697595713/CEA78F620A6D63E63B355FA2C0373E33" alt="img"></p></li><li><p>四次挥手过程</p><p>（1）客户端向服务器发送FIN控制报文段（首部中的 FIN 比特被置位）；</p><p>（2）服务端收到FIN，回复ACK。服务器进入关闭等待状态，发送FIN;</p><p>（3）客户端收到FIN，给服务器回复ACK，客户端进入等待状态（进入“等待”，以确保服务器收到ACK真正关闭连接）;</p><p>（4）服务端收到ACK，链接关闭。</p></li><li><p><strong>四次挥手原因</strong></p><p>TCP协议是一种<strong>面向连接的、可靠的、基于字节流的</strong>运输层通信协议。TCP是<strong>全双工模式</strong>，这就意味着，当客户端发出FIN报文段时，只是表示客户端已经没有数据要发送了，客户端告诉服务器，它的数据已经全部发送完毕了；但是，这个时候客户端还是可以接受来自服务端的数据；当服务端返回ACK报文段时，表示它已经知道客户端没有数据发送了，但是服务端还是可以发送数据到客户端的；当服务端也发送了FIN报文段时，这个时候就表示服务端也没有数据要发送了，就会告诉客户端，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p><p>简单地说，前 2 次挥手用于关闭一个方向的数据通道，后两次挥手用于关闭另外一个方向的数据通道。</p></li></ol>',24),o=[i];function s(e,a,P,g,c,T){return r(),t("div",null,o)}const d=p(l,[["render",s]]);export{_ as __pageData,d as default};
