import{_ as a,c as e,o as t,d as i}from"./app.c282a12f.js";const k=JSON.parse('{"title":"堆与栈","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-请你解释一下，内存中的栈(stack)、堆(heap) 和静态区(static area) 的用法。","slug":"_01-请你解释一下-内存中的栈-stack-、堆-heap-和静态区-static-area-的用法。","link":"#_01-请你解释一下-内存中的栈-stack-、堆-heap-和静态区-static-area-的用法。","children":[]},{"level":2,"title":"02-说一说，heap和stack有什么区别。","slug":"_02-说一说-heap和stack有什么区别。","link":"#_02-说一说-heap和stack有什么区别。","children":[]},{"level":2,"title":"03-介绍一下，堆与栈的不同是什么？","slug":"_03-介绍一下-堆与栈的不同是什么","link":"#_03-介绍一下-堆与栈的不同是什么","children":[]}],"relativePath":"Computer/数据结构及算法/堆与栈.md"}'),s={name:"Computer/数据结构及算法/堆与栈.md"},r=i('<h1 id="堆与栈" tabindex="-1">堆与栈 <a class="header-anchor" href="#堆与栈" aria-hidden="true">#</a></h1><h2 id="_01-请你解释一下-内存中的栈-stack-、堆-heap-和静态区-static-area-的用法。" tabindex="-1">01-请你解释一下，内存中的栈(stack)、堆(heap) 和静态区(static area) 的用法。 <a class="header-anchor" href="#_01-请你解释一下-内存中的栈-stack-、堆-heap-和静态区-static-area-的用法。" aria-hidden="true">#</a></h2><p>考察点：堆栈</p><h4 id="参考回答" tabindex="-1">参考回答： <a class="header-anchor" href="#参考回答" aria-hidden="true">#</a></h4><p>**堆区:**专门用来保存对象的实例(new 创建的对象和数组)，实际上也只是保存对象实例的属性值，属性的类型和对象本身的类型标记等，并不保存对象的方法（方法是指令，保存在Stack中）</p><ul><li>存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)</li><li>jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身.</li><li>一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。</li></ul><p>**栈区:**对象实例在Heap 中分配好以后，需要在Stack中保存一个4字节的Heap内存地址，用来定位该对象实例在Heap 中的位置，便于找到该对象实例。</p><ul><li>每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区</li><li>每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。</li><li>栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。</li><li>由编译器自动分配释放 ，存放函数的参数值，局部变量的值等．</li></ul><p><strong>静态区/方法区:</strong></p><ul><li>方法区又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和<a href="https://so.csdn.net/so/search?q=static&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">static</a>变量。</li><li>方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。</li><li>全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域</li></ul><h2 id="_02-说一说-heap和stack有什么区别。" tabindex="-1">02-说一说，heap和stack有什么区别。 <a class="header-anchor" href="#_02-说一说-heap和stack有什么区别。" aria-hidden="true">#</a></h2><p>考察点：堆与栈</p><h4 id="参考回答-1" tabindex="-1">参考回答： <a class="header-anchor" href="#参考回答-1" aria-hidden="true">#</a></h4><ul><li>1.heap是堆，stack是栈。</li><li>2.stack的空间由操作系统自动分配和释放，heap的空间是手动申请和释放的，heap常用new关键字来分配。</li><li>3.stack空间有限，heap的空间是很大的自由区。在Java中，若只是声明一个对象，则先在栈内存中为其分配地址空间，若再new一下，实例化它，则在堆内存中为其分配地址。</li><li>4.举例：数据类型 变量名；这样定义的东西在栈区。如：Object a =null; 只在栈内存中分配空间new 数据类型();或者malloc(长度); 这样定义的东西就在堆区如：Object b =new Object(); 则在堆内存中分配空间</li></ul><h2 id="_03-介绍一下-堆与栈的不同是什么" tabindex="-1">03-介绍一下，堆与栈的不同是什么？ <a class="header-anchor" href="#_03-介绍一下-堆与栈的不同是什么" aria-hidden="true">#</a></h2><p>考察点：堆，栈</p><h4 id="参考回答-2" tabindex="-1">参考回答： <a class="header-anchor" href="#参考回答-2" aria-hidden="true">#</a></h4><p>（1）Java的堆是一个运行时数据区，类的对象从中分配空间。通过比如：new等指令建立，不需要代码显式的释放，由垃圾回收来负责。</p><p>优点：可以动态地分配内存大小，垃圾收集器会自动回收垃圾数据。</p><p>缺点：由于其优点，所以存取速度较慢。</p><p>（2）栈：</p><p>其数据项的插入和删除都只能在称为栈顶的一端完成，后进先出。栈中存放一些基本类型的 变量 和 对象句柄。</p><p>优点：读取数度比堆要快，仅次于寄存器，栈数据可以共享。</p><p>缺点：比堆缺乏灵活性，存在栈中的数据大小与生存期必须是确定的。</p><p>举例：</p><p>String是一个特殊的包装类数据。可以用： String str = new String(&quot;csdn&quot;); String str = &quot;csdn&quot;;</p><p>两种的形式来创建，第一种是用new()来新建对象的，它会在存放于堆中。每调用一次就会创建一个新的对象。而第二种是先在栈中创建一个对String类的对象引用变量str，然后查找栈中有没有存放&quot;csdn&quot;，如果没有，则将&quot;csdn&quot;存放进栈，并令str指向”abc”，如果已经有”csdn” 则直接令str指向“csdn”。</p>',27),c=[r];function l(n,h,p,d,o,_){return t(),e("div",null,c)}const f=a(s,[["render",l]]);export{k as __pageData,f as default};
