import{_ as l,c as a,o as e,d as s}from"./app.c282a12f.js";const h=JSON.parse('{"title":"Webpack","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-对webpack的理解","slug":"_01-对webpack的理解","link":"#_01-对webpack的理解","children":[]},{"level":2,"title":"02-webpack的打包流程","slug":"_02-webpack的打包流程","link":"#_02-webpack的打包流程","children":[]},{"level":2,"title":"03-webpack中常见的Loader","slug":"_03-webpack中常见的loader","link":"#_03-webpack中常见的loader","children":[]},{"level":2,"title":"04-webpack中常见的Plugin","slug":"_04-webpack中常见的plugin","link":"#_04-webpack中常见的plugin","children":[]},{"level":2,"title":"05-利用webpack优化前端性能","slug":"_05-利用webpack优化前端性能","link":"#_05-利用webpack优化前端性能","children":[]}],"relativePath":"Web/interview/前端工具/Webpack.md"}'),i={name:"Web/interview/前端工具/Webpack.md"},n=s(`<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h1><h2 id="_01-对webpack的理解" tabindex="-1">01-对webpack的理解 <a class="header-anchor" href="#_01-对webpack的理解" aria-hidden="true">#</a></h2><ol><li>概述 <ul><li>webpack是一个模块打包工具，可以使用webpack管理模块</li><li>在webpack看来，项目里所有资源皆是模块，分析模块间的依赖关系，最终编译输出模块为HTML、CSS、JavaScript以及各种静态文件，让开发过程更高效</li></ul></li><li>webpack的能力 <ul><li>编译代码能力，提高效率，解决浏览器兼容问题</li><li>模块整合能力，提高性能，可维护性，解决浏览器频繁请求文件的问题</li><li>万物皆可模块能力，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载都可以通过代码控制</li></ul></li></ol><h2 id="_02-webpack的打包流程" tabindex="-1">02-webpack的打包流程 <a class="header-anchor" href="#_02-webpack的打包流程" aria-hidden="true">#</a></h2><ol><li>初始化：启动构建，读取和合并配置参数，加载Plugin，数理化Complier <ul><li>合并shell和配置文件的参数并且实例化Complier对象</li><li>加载插件</li><li>处理入口</li></ul></li><li>编译：从Entry出发，针对每个Module串行调用对应的Loader去翻译文件内容，再找到该Module对应的Module，递归地进行编译处理</li><li>输出：对编译后的Module组合成Chunk，把Chunk转换成文件，输出到文件系统</li></ol><h2 id="_03-webpack中常见的loader" tabindex="-1">03-webpack中常见的Loader <a class="header-anchor" href="#_03-webpack中常见的loader" aria-hidden="true">#</a></h2><ol><li>CSS <ul><li>style-loader，用于将css编译完成的样式，挂载到页面的style标签上</li><li>css-loader，打包处理css文件，需配合style-loader使用</li><li>less-loader，解析less</li><li>sass-loader，解析sass</li></ul></li><li>JS <ul><li>ts-laoder，解析将typescript转换成javascript</li><li>babel-loader，将ES6转换成ES5</li><li>eslint-loader，用于检查代码是否符合规范，是否存在语法错误</li></ul></li><li>静态资源 <ul><li>url-loader，解析图片类型资源，可指定大小，若图片大小小于指定大小，则嫁给你图片转换为base64格式字符串，再将字符串打包到js文件</li><li>file-loader，分发文件到 output 目录并返回相对路径</li><li>json-loader，解析json文件</li><li>image-loader：加载并且压缩图片文件</li></ul></li></ol><h2 id="_04-webpack中常见的plugin" tabindex="-1">04-webpack中常见的Plugin <a class="header-anchor" href="#_04-webpack中常见的plugin" aria-hidden="true">#</a></h2><ol><li>html-webpack-plugin：打包结束后，自动生成一个html文件，并把打包生成的js模块引入到该html中</li><li>mini-css-extract-plugin：提取css到一个单独的文件中</li><li>compression-webpack-plugin：实现gzip压缩，可以很大程度减少包的大小</li></ol><h2 id="_05-利用webpack优化前端性能" tabindex="-1">05-利用webpack优化前端性能 <a class="header-anchor" href="#_05-利用webpack优化前端性能" aria-hidden="true">#</a></h2><ol><li><p>代码压缩</p><ul><li>JS代码压缩：terser-webpack-plugin</li><li>CSS代码压缩：minimizer-webpack-plugin</li><li>HTML代码压缩：html-webpack-plugin</li><li>文件大小压缩：compression-webpack-plugin</li><li>图片压缩</li></ul></li><li><p>代码优化</p><ul><li><p>Tree Shaking：删除代码中未被引用的代码</p></li><li><p>代码分离：将代码分离到不同的bundle中，按需加载文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    optimization:</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ol>`,11),p=[n];function c(o,r,t,d,u,b){return e(),a("div",null,p)}const _=l(i,[["render",c]]);export{h as __pageData,_ as default};
