import{_ as a,c as e,o as l,d as i}from"./app.c282a12f.js";const v=JSON.parse('{"title":"Java基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-为什么Java代码可以实现一次编写、到处运行？","slug":"_01-为什么java代码可以实现一次编写、到处运行","link":"#_01-为什么java代码可以实现一次编写、到处运行","children":[]},{"level":2,"title":"02-一个Java文件里可以有多个类吗（不含内部类）？","slug":"_02-一个java文件里可以有多个类吗-不含内部类","link":"#_02-一个java文件里可以有多个类吗-不含内部类","children":[]},{"level":2,"title":"03-说一说你对Java访问权限的了解","slug":"_03-说一说你对java访问权限的了解","link":"#_03-说一说你对java访问权限的了解","children":[]},{"level":2,"title":"04-介绍一下Java的数据类型","slug":"_04-介绍一下java的数据类型","link":"#_04-介绍一下java的数据类型","children":[]},{"level":2,"title":"05-请介绍全局变量和局部变量的区别","slug":"_05-请介绍全局变量和局部变量的区别","link":"#_05-请介绍全局变量和局部变量的区别","children":[]},{"level":2,"title":"06-请介绍一下实例变量的默认值","slug":"_06-请介绍一下实例变量的默认值","link":"#_06-请介绍一下实例变量的默认值","children":[]},{"level":2,"title":"07-为什么要有包装类？","slug":"_07-为什么要有包装类","link":"#_07-为什么要有包装类","children":[]},{"level":2,"title":"08-说一说自动装箱、自动拆箱的应用场景","slug":"_08-说一说自动装箱、自动拆箱的应用场景","link":"#_08-说一说自动装箱、自动拆箱的应用场景","children":[]},{"level":2,"title":"09-如何对Integer和Double类型判断相等？","slug":"_09-如何对integer和double类型判断相等","link":"#_09-如何对integer和double类型判断相等","children":[]},{"level":2,"title":"10-说一说你对面向对象的理解","slug":"_10-说一说你对面向对象的理解","link":"#_10-说一说你对面向对象的理解","children":[]},{"level":2,"title":"11-面向对象的三大特征是什么？","slug":"_11-面向对象的三大特征是什么","link":"#_11-面向对象的三大特征是什么","children":[]},{"level":2,"title":"12-封装的目的是什么，为什么要有封装？","slug":"_12-封装的目的是什么-为什么要有封装","link":"#_12-封装的目的是什么-为什么要有封装","children":[]},{"level":2,"title":"13-说一说你对多态的理解","slug":"_13-说一说你对多态的理解","link":"#_13-说一说你对多态的理解","children":[]},{"level":2,"title":"14-Java中的多态是怎么实现的？","slug":"_14-java中的多态是怎么实现的","link":"#_14-java中的多态是怎么实现的","children":[]},{"level":2,"title":"15-Java为什么是单继承，为什么不能多继承？","slug":"_15-java为什么是单继承-为什么不能多继承","link":"#_15-java为什么是单继承-为什么不能多继承","children":[]},{"level":2,"title":"16-说一说重写与重载的区别","slug":"_16-说一说重写与重载的区别","link":"#_16-说一说重写与重载的区别","children":[]},{"level":2,"title":"17- ==和equals()有什么区别？","slug":"_17-和equals-有什么区别","link":"#_17-和equals-有什么区别","children":[]},{"level":2,"title":"18-说一说String和StringBuffer有什么区别","slug":"_18-说一说string和stringbuffer有什么区别","link":"#_18-说一说string和stringbuffer有什么区别","children":[]},{"level":2,"title":"19-说一说StringBuffer和StringBuilder有什么区别","slug":"_19-说一说stringbuffer和stringbuilder有什么区别","link":"#_19-说一说stringbuffer和stringbuilder有什么区别","children":[]},{"level":2,"title":"20-接口和抽象类有什么区别？","slug":"_20-接口和抽象类有什么区别","link":"#_20-接口和抽象类有什么区别","children":[]}],"relativePath":"Java/interview_java/Java基础/Java基础.md"}'),r={name:"Java/interview_java/Java基础/Java基础.md"},t=i('<h1 id="java基础" tabindex="-1">Java基础 <a class="header-anchor" href="#java基础" aria-hidden="true">#</a></h1><h2 id="_01-为什么java代码可以实现一次编写、到处运行" tabindex="-1">01-为什么Java代码可以实现一次编写、到处运行？ <a class="header-anchor" href="#_01-为什么java代码可以实现一次编写、到处运行" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>JVM（Java虚拟机）是Java跨平台的关键。</p><p>在程序运行前，Java源代码（.java）需要经过编译器编译成字节码（.class）。在程序运行时，JVM负责将字节码翻译成特定平台下的机器码并运行，也就是说，只要在不同的平台上安装对应的JVM，就可以运行字节码文件。</p><p>同一份Java源代码在不同的平台上运行，它不需要做任何的改变，并且只需要编译一次。而编译好的字节码，是通过JVM这个中间的“桥梁”实现跨平台的，JVM是与平台相关的软件，它能将统一的字节码翻译成该平台的机器码。</p><p><strong>注意事项</strong></p><ol><li>编译的结果是生成字节码、不是机器码，字节码不能直接运行，必须通过JVM翻译成机器码才能运行；</li><li>跨平台的是Java程序、而不是JVM，JVM是用C/C++开发的软件，不同平台下需要安装不同版本的JVM。</li></ol><h2 id="_02-一个java文件里可以有多个类吗-不含内部类" tabindex="-1">02-一个Java文件里可以有多个类吗（不含内部类）？ <a class="header-anchor" href="#_02-一个java文件里可以有多个类吗-不含内部类" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><ol><li>一个java文件里可以有多个类，但最多只能有一个被public修饰的类；</li><li>如果这个java文件中包含public修饰的类，则这个类的名称必须和java文件名一致。</li></ol><h2 id="_03-说一说你对java访问权限的了解" tabindex="-1">03-说一说你对Java访问权限的了解 <a class="header-anchor" href="#_03-说一说你对java访问权限的了解" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>Java语言为我们提供了三种访问修饰符，即private、protected、public，在使用这些修饰符修饰目标时，一共可以形成四种访问权限，即private、default、protected、public，注意在不加任何修饰符时为default访问权限。</p><p>在修饰成员变量/成员方法时，该成员的四种访问权限的含义如下：</p><ul><li>private：该成员可以被该类内部成员访问；</li><li>default：该成员可以被该类内部成员访问，也可以被同一包下其他的类访问；</li><li>protected：该成员可以被该类内部成员访问，也可以被同一包下其他的类访问，还可以被它的子类访问；</li><li>public：该成员可以被任意包下，任意类的成员进行访问。</li></ul><p>在修饰类时，该类只有两种访问权限，对应的访问权限的含义如下：</p><ul><li>default：该类可以被同一包下其他的类访问；</li><li>public：该类可以被任意包下，任意的类所访问。</li></ul><h2 id="_04-介绍一下java的数据类型" tabindex="-1">04-介绍一下Java的数据类型 <a class="header-anchor" href="#_04-介绍一下java的数据类型" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>Java数据类型包括基本数据类型和引用数据类型两大类。</p><p>基本数据类型有8个，可以分为4个小类，分别是整数类型（byte/short/int/long）、浮点类型（float/double）、字符类型（char）、布尔类型（boolean）。其中，4个整数类型中，int类型最为常用。2个浮点类型中，double最为常用。另外，在这8个基本类型当中，除了布尔类型之外的其他7个类型，都可以看做是数字类型，它们相互之间可以进行类型转换。</p><p>引用类型就是对一个对象的引用，根据引用对象类型的不同，可以将引用类型分为3类，即数组、类、接口类型。引用类型本质上就是通过指针，指向堆中对象所持有的内存空间，只是Java语言不再沿用指针这个说法而已。</p><p><strong>扩展阅读</strong></p><p>对于基本数据类型，你需要了解每种类型所占据的内存空间，面试官可能会追问这类问题：</p><ul><li>byte：1字节（8位），数据范围是 -2^7 ~ 2^7-1。</li><li>short：2字节（16位），数据范围是 -2^15 ~ 2^15-1。</li><li>int：4字节（32位），数据范围是 -2^31 ~ 2^31-1。</li><li>long：8字节（64位），数据范围是 -2^63 ~ 2^63-1。</li><li>float：4字节（32位），数据范围大约是 -3.4<em>10^38 ~ 3.4</em>10^38。</li><li>double：8字节（64位），数据范围大约是 -1.8<em>10^308 ~ 1.8</em>10^308。</li><li>char：2字节（16位），数据范围是 \\u0000 ~ \\uffff。</li><li>boolean：Java规范没有明确的规定，不同的JVM有不同的实现机制。</li></ul><h2 id="_05-请介绍全局变量和局部变量的区别" tabindex="-1">05-请介绍全局变量和局部变量的区别 <a class="header-anchor" href="#_05-请介绍全局变量和局部变量的区别" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>Java中的变量分为成员变量和局部变量，它们的区别如下：</p><p>成员变量：</p><ol><li>成员变量是在类的范围里定义的变量；</li><li>成员变量有默认初始值；</li><li>未被static修饰的成员变量也叫实例变量，它存储于对象所在的堆内存中，生命周期与对象相同；</li><li>被static修饰的成员变量也叫类变量，它存储于方法区中，生命周期与当前类相同。</li></ol><p>局部变量：</p><ol><li>局部变量是在方法里定义的变量；</li><li>局部变量没有默认初始值；</li><li>局部变量存储于栈内存中，作用的范围结束，变量空间会自动的释放。</li></ol><h2 id="_06-请介绍一下实例变量的默认值" tabindex="-1">06-请介绍一下实例变量的默认值 <a class="header-anchor" href="#_06-请介绍一下实例变量的默认值" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>实例变量若为引用数据类型，其默认值一律为null。若为基本数据类型，其默认值如下：</p><ul><li>byte：0</li><li>short：0</li><li>int：0</li><li>long：0L</li><li>float：0.0F</li><li>double：0.0</li><li>char：&#39;\\u0000&#39;</li><li>boolean：false</li></ul><h2 id="_07-为什么要有包装类" tabindex="-1">07-为什么要有包装类？ <a class="header-anchor" href="#_07-为什么要有包装类" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>Java语言是面向对象的语言，其设计理念是“一切皆对象”。但8种基本数据类型却出现了例外，它们不具备对象的特性。正是为了解决这个问题，Java为每个基本数据类型都定义了一个对应的引用类型，这就是包装类。</p><p><strong>扩展阅读</strong></p><p>Java之所以提供8种基本数据类型，主要是为了照顾程序员的传统习惯。这8种基本数据类型的确带来了一定的方便性，但在某些时候也会受到一些制约。比如，所有的引用类型的变量都继承于Object类，都可以当做Object类型的变量使用，但基本数据类型却不可以。如果某个方法需要Object类型的参数，但实际传入的值却是数字的话，就需要做特殊的处理了。有了包装类，这种问题就可以得以简化。</p><h2 id="_08-说一说自动装箱、自动拆箱的应用场景" tabindex="-1">08-说一说自动装箱、自动拆箱的应用场景 <a class="header-anchor" href="#_08-说一说自动装箱、自动拆箱的应用场景" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>自动装箱、自动拆箱是JDK1.5提供的功能。</p><p>自动装箱：可以把一个基本类型的数据直接赋值给对应的包装类型；</p><p>自动拆箱：可以把一个包装类型的对象直接赋值给对应的基本类型；</p><p>通过自动装箱、自动拆箱功能，可以大大简化基本类型变量和包装类对象之间的转换过程。比如，某个方法的参数类型为包装类型，调用时我们所持有的数据却是基本类型的值，则可以不做任何特殊的处理，直接将这个基本类型的值传入给方法即可。</p><h2 id="_09-如何对integer和double类型判断相等" tabindex="-1">09-如何对Integer和Double类型判断相等？ <a class="header-anchor" href="#_09-如何对integer和double类型判断相等" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>Integer、Double不能直接进行比较，这包括：</p><ul><li>不能用==进行直接比较，因为它们是不同的数据类型；</li><li>不能转为字符串进行比较，因为转为字符串后，浮点值带小数点，整数值不带，这样它们永远都不相等；</li><li>不能使用compareTo方法进行比较，虽然它们都有compareTo方法，但该方法只能对相同类型进行比较。</li></ul><p>整数、浮点类型的包装类，都继承于Number类型，而Number类型分别定义了将数字转换为byte、short、int、long、float、double的方法。所以，可以将Integer、Double先转为转换为相同的基本数据类型（如double），然后使用==进行比较。</p><h2 id="_10-说一说你对面向对象的理解" tabindex="-1">10-说一说你对面向对象的理解 <a class="header-anchor" href="#_10-说一说你对面向对象的理解" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>面向对象是一种更优秀的程序设计方法，它的基本思想是使用类、对象、继承、封装、消息等基本概念进行程序设计。它从现实世界中客观存在的事物出发来构造软件系统，并在系统构造中尽可能运用人类的自然思维方式，强调直接以现实世界中的事物为中心来思考，认识问题，并根据这些事物的本质特点，把它们抽象地表示为系统中的类，作为系统的基本构成单元，这使得软件系统的组件可以直接映像到客观世界，并保持客观世界中事物及其相互关系的本来面貌。</p><h2 id="_11-面向对象的三大特征是什么" tabindex="-1">11-面向对象的三大特征是什么？ <a class="header-anchor" href="#_11-面向对象的三大特征是什么" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>面向对象的程序设计方法具有三个基本特征：封装、继承、多态。其中，封装指的是将对象的实现细节隐藏起来，然后通过一些公用方法来暴露该对象的功能；继承是面向对象实现软件复用的重要手段，当子类继承父类后，子类作为一种特殊的父类，将直接获得父类的属性和方法；多态指的是子类对象可以直接赋给父类变量，但运行时依然表现出子类的行为特征，这意味着同一个类型的对象在执行同一个方法时，可能表现出多种行为特征。</p><h2 id="_12-封装的目的是什么-为什么要有封装" tabindex="-1">12-封装的目的是什么，为什么要有封装？ <a class="header-anchor" href="#_12-封装的目的是什么-为什么要有封装" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>封装是面向对象编程语言对客观世界的模拟，在客观世界里，对象的状态信息都被隐藏在对象内部，外界无法直接操作和修改。对一个类或对象实现良好的封装，可以实现以下目的：</p><ul><li>隐藏类的实现细节；</li><li>让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里加入控制逻辑，限制对成员变量的不合理访问；</li><li>可进行数据检查，从而有利于保证对象信息的完整性；</li><li>便于修改，提高代码的可维护性。</li></ul><p><strong>扩展阅读</strong></p><p>为了实现良好的封装，需要从两个方面考虑：</p><ul><li>将对象的成员变量和实现细节隐藏起来，不允许外部直接访问；</li><li>把方法暴露出来，让方法来控制对这些成员变量进行安全的访问和操作。</li></ul><p>封装实际上有两个方面的含义：把该隐藏的隐藏起来，把该暴露的暴露出来。这两个方面都需要通过使用Java提供的访问控制符来实现。</p><h2 id="_13-说一说你对多态的理解" tabindex="-1">13-说一说你对多态的理解 <a class="header-anchor" href="#_13-说一说你对多态的理解" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>因为子类其实是一种特殊的父类，因此Java允许把一个子类对象直接赋给一个父类引用变量，无须任何类型转换，或者被称为向上转型，向上转型由系统自动完成。</p><p>当把一个子类对象直接赋给父类引用变量时，例如 BaseClass obj = new SubClass();，这个obj引用变量的编译时类型是BaseClass，而运行时类型是SubClass，当运行时调用该引用变量的方法时，其方法行为总是表现出子类方法的行为特征，而不是父类方法的行为特征，这就可能出现：相同类型的变量、调用同一个方法时呈现出多种不同的行为特征，这就是多态。</p><h2 id="_14-java中的多态是怎么实现的" tabindex="-1">14-Java中的多态是怎么实现的？ <a class="header-anchor" href="#_14-java中的多态是怎么实现的" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>多态的实现离不开继承，在设计程序时，我们可以将参数的类型定义为父类型。在调用程序时，则可以根据实际情况，传入该父类型的某个子类型的实例，这样就实现了多态。对于父类型，可以有三种形式，即普通的类、抽象类、接口。对于子类型，则要根据它自身的特征，重写父类的某些方法，或实现抽象类/接口的某些抽象方法。</p><h2 id="_15-java为什么是单继承-为什么不能多继承" tabindex="-1">15-Java为什么是单继承，为什么不能多继承？ <a class="header-anchor" href="#_15-java为什么是单继承-为什么不能多继承" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>首先，Java是单继承的，指的是Java中一个类只能有一个直接的父类。Java不能多继承，则是说Java中一个类不能直接继承多个父类。</p><p>其次，Java在设计时借鉴了C++的语法，而C++是支持多继承的。Java语言之所以摒弃了多继承的这项特征，是因为多继承容易产生混淆。比如，两个父类中包含相同的方法时，子类在调用该方法或重写该方法时就会迷惑。</p><p>准确来说，Java是可以实现&quot;多继承&quot;的。因为尽管一个类只能有一个直接父类，但是却可以有任意多个间接的父类。这样的设计方式，避免了多继承时所产生的混淆。</p><h2 id="_16-说一说重写与重载的区别" tabindex="-1">16-说一说重写与重载的区别 <a class="header-anchor" href="#_16-说一说重写与重载的区别" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>重载发生在同一个类中，若多个方法之间方法名相同、参数列表不同，则它们构成重载的关系。重载与方法的返回值以及访问修饰符无关，即重载的方法不能根据返回类型进行区分。</p><p>重写发生在父类子类中，若子类方法想要和父类方法构成重写关系，则它的方法名、参数列表必须与父类方法相同。另外，返回值要小于等于父类方法，抛出的异常要小于等于父类方法，访问修饰符则要大于等于父类方法。还有，若父类方法的访问修饰符为private，则子类不能对其重写。</p><h2 id="_17-和equals-有什么区别" tabindex="-1">17- ==和equals()有什么区别？ <a class="header-anchor" href="#_17-和equals-有什么区别" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>==运算符：</p><ul><li>作用于基本数据类型时，是比较两个数值是否相等；</li><li>作用于引用数据类型时，是比较两个对象的内存地址是否相同，即判断它们是否为同一个对象；</li></ul><p>equals()方法：</p><ul><li>没有重写时，Object默认以 == 来实现，即比较两个对象的内存地址是否相同；</li><li>进行重写后，一般会按照对象的内容来进行比较，若两个对象内容相同则认为对象相等，否则认为对象不等。</li></ul><h2 id="_18-说一说string和stringbuffer有什么区别" tabindex="-1">18-说一说String和StringBuffer有什么区别 <a class="header-anchor" href="#_18-说一说string和stringbuffer有什么区别" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>String类是不可变类，即一旦一个String对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。</p><p>StringBuffer对象则代表一个字符序列可变的字符串，当一个StringBuffer被创建以后，通过StringBuffer提供的append()、insert()、reverse()、setCharAt()、setLength()等方法可以改变这个字符串对象的字符序列。一旦通过StringBuffer生成了最终想要的字符串，就可以调用它的toString()方法将其转换为一个String对象。</p><h2 id="_19-说一说stringbuffer和stringbuilder有什么区别" tabindex="-1">19-说一说StringBuffer和StringBuilder有什么区别 <a class="header-anchor" href="#_19-说一说stringbuffer和stringbuilder有什么区别" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>StringBuffer、StringBuilder都代表可变的字符串对象，它们有共同的父类 AbstractStringBuilder，并且两个类的构造方法和成员方法也基本相同。不同的是，StringBuffer是线程安全的，而StringBuilder是非线程安全的，所以StringBuilder性能略高。一般情况下，要创建一个内容可变的字符串，建议优先考虑StringBuilder类。</p><h2 id="_20-接口和抽象类有什么区别" tabindex="-1">20-接口和抽象类有什么区别？ <a class="header-anchor" href="#_20-接口和抽象类有什么区别" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>从设计目的上来说，二者有如下的区别：</p><p>接口体现的是一种规范。对于接口的实现者而言，接口规定了实现者必须向外提供哪些服务；对于接口的调用者而言，接口规定了调用者可以调用哪些服务，以及如何调用这些服务。当在一个程序中使用接口时，接口是多个模块间的耦合标准；当在多个应用程序之间使用接口时，接口是多个程序之间的通信标准。</p><p>抽象类体现的是一种模板式设计。抽象类作为多个子类的抽象父类，可以被当成系统实现过程中的中间产品，这个中间产品已经实现了系统的部分功能，但这个产品依然不能当成最终产品，必须有更进一步的完善，这种完善可能有几种不同方式。</p><p>从使用方式上来说，二者有如下的区别：</p><ul><li>接口里只能包含抽象方法、静态方法、默认方法和私有方法，不能为普通方法提供方法实现；抽象类则完全可以包含普通方法。</li><li>接口里只能定义静态常量，不能定义普通成员变量；抽象类里则既可以定义普通成员变量，也可以定义静态常量。</li><li>接口里不包含构造器；抽象类里可以包含构造器，抽象类里的构造器并不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。</li><li>接口里不能包含初始化块；但抽象类则完全可以包含初始化块。</li><li>一个类最多只能有一个直接父类，包括抽象类；但一个类可以直接实现多个接口，通过实现多个接口可以弥补Java单继承的不足。</li></ul>',103),n=[t];function s(d,p,h,o,u,g){return l(),e("div",null,n)}const c=a(r,[["render",s]]);export{v as __pageData,c as default};
