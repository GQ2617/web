import{_ as l,c as s,o as a,d as n}from"./app.c282a12f.js";const A=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-数据类型和存储上的差别","slug":"_01-数据类型和存储上的差别","link":"#_01-数据类型和存储上的差别","children":[]},{"level":2,"title":"02-typeof与instanceof","slug":"_02-typeof与instanceof","link":"#_02-typeof与instanceof","children":[]},{"level":2,"title":"03-深拷贝与浅拷贝","slug":"_03-深拷贝与浅拷贝","link":"#_03-深拷贝与浅拷贝","children":[]},{"level":2,"title":"04-作用域链","slug":"_04-作用域链","link":"#_04-作用域链","children":[]},{"level":2,"title":"05-原型、原型链","slug":"_05-原型、原型链","link":"#_05-原型、原型链","children":[]},{"level":2,"title":"06-闭包","slug":"_06-闭包","link":"#_06-闭包","children":[]},{"level":2,"title":"07-内存泄露","slug":"_07-内存泄露","link":"#_07-内存泄露","children":[]},{"level":2,"title":"08-数组中的常用方法","slug":"_08-数组中的常用方法","link":"#_08-数组中的常用方法","children":[]},{"level":2,"title":"09-字符串常用方法","slug":"_09-字符串常用方法","link":"#_09-字符串常用方法","children":[]},{"level":2,"title":"10-new操作符","slug":"_10-new操作符","link":"#_10-new操作符","children":[]},{"level":2,"title":"11-this","slug":"_11-this","link":"#_11-this","children":[]},{"level":2,"title":"12-高阶函数和柯里化","slug":"_12-高阶函数和柯里化","link":"#_12-高阶函数和柯里化","children":[]},{"level":2,"title":"13-防抖和节流","slug":"_13-防抖和节流","link":"#_13-防抖和节流","children":[]},{"level":2,"title":"14-递归","slug":"_14-递归","link":"#_14-递归","children":[]},{"level":2,"title":"15-数组去重","slug":"_15-数组去重","link":"#_15-数组去重","children":[]},{"level":2,"title":"16-数组扁平化","slug":"_16-数组扁平化","link":"#_16-数组扁平化","children":[]},{"level":2,"title":"17-for of可以遍历哪些对象","slug":"_17-for-of可以遍历哪些对象","link":"#_17-for-of可以遍历哪些对象","children":[]},{"level":2,"title":"18-null和undefined","slug":"_18-null和undefined","link":"#_18-null和undefined","children":[]},{"level":2,"title":"19-Set和Map的区别","slug":"_19-set和map的区别","link":"#_19-set和map的区别","children":[]},{"level":2,"title":"20-delete使用原则","slug":"_20-delete使用原则","link":"#_20-delete使用原则","children":[]},{"level":2,"title":"21-箭头函数","slug":"_21-箭头函数","link":"#_21-箭头函数","children":[]},{"level":2,"title":"22-ES6新特性","slug":"_22-es6新特性","link":"#_22-es6新特性","children":[]},{"level":2,"title":"23-哪些类型可以被扩展操作符...扩展","slug":"_23-哪些类型可以被扩展操作符-扩展","link":"#_23-哪些类型可以被扩展操作符-扩展","children":[]},{"level":2,"title":"24-call、apply、bind的作用和区别","slug":"_24-call、apply、bind的作用和区别","link":"#_24-call、apply、bind的作用和区别","children":[]}],"relativePath":"Web/interview/前端基础/JavaScript.md"}'),o={name:"Web/interview/前端基础/JavaScript.md"},p=n(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-hidden="true">#</a></h1><h2 id="_01-数据类型和存储上的差别" tabindex="-1">01-数据类型和存储上的差别 <a class="header-anchor" href="#_01-数据类型和存储上的差别" aria-hidden="true">#</a></h2><ol><li>数据类型 <ol><li>基本数据类型：Number、String、Boolean、Undefined、Null、symbol</li><li>复杂数据类型：Object、Array、Function</li><li>其他复杂数据类型：Date、RegExp、Map、Set</li></ol></li><li>存储区别 <ol><li>声明变量时不同的内存地址分配 <ol><li>基本数据类型存储在栈中，在栈中存放的是对应的值</li><li>引用类型的对象存储在堆中，在栈中存放的是指向堆内存的地址</li></ol></li><li>不同的类型数据导致赋值变量时的不同 <ol><li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。即两个变量指向堆内存中同一个对象</li></ol></li></ol></li></ol><h2 id="_02-typeof与instanceof" tabindex="-1">02-typeof与instanceof <a class="header-anchor" href="#_02-typeof与instanceof" aria-hidden="true">#</a></h2><ol><li><p>概述：</p><ol><li>typeof一般是用来判断变量是否存在，返回它的类型，其中基本数据类型null返回的是一个object，但null不属于引用类型，typeof除了判断function函数会识别，其他的引用类型输出均为object</li><li>instanceof主要用于判断一个实例是否属于某种类型，可以用来判断引用数据类型，但不能正确判断基本数据类型，根据在原型链中查找判断当前数据的原型对象是否存在返回布尔类型</li></ol></li><li><p>使用</p><ol><li>typeof a !==&quot;undefined&quot; 判断变量a是否存在</li><li>person instanceof Person 判断person实例对象是否是构造函数Person生成的对象</li></ol></li><li><p>区别</p><ol><li>typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值</li><li>instanceof可以准确地判断复杂引用数据类型，但是不能正确判断基本数据类型</li><li>typeof也有弊端，可以判断除null之外的基本数据类型，但对于引用类型，除function外都无法判断</li><li>如果需要通用检测数据类型，可以采用Object.prototype.toString，调用该方法，统一返回[Object xxx]</li></ol></li></ol><h2 id="_03-深拷贝与浅拷贝" tabindex="-1">03-深拷贝与浅拷贝 <a class="header-anchor" href="#_03-深拷贝与浅拷贝" aria-hidden="true">#</a></h2><ol><li>概述 <ol><li>浅拷贝：拷贝基本数据类型为它的值，拷贝引用数据类型为地址，生成新的数据，修改新的数据会影响原数据，实际开发常用的方法有Object.assign，扩展运算符，slice()，concat()</li><li>深拷贝：在内存中开辟一个新的栈空间保存新的数据，修改新数据不会影响到原数据，开发中常用的方法有loadsh中的_.cloneDeep()方法，JSON.stringify()（该方法会忽略函数、undefined、symbol）</li></ol></li><li>浅拷贝 <ol><li>指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</li><li>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</li></ol></li><li>深拷贝 <ol><li>深拷贝开辟一个新的栈，两个对象属性完全相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</li></ol></li><li>区别 <ol><li>浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响到原对象</li><li>深拷贝会另外创造一个一摸一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象</li></ol></li></ol><h2 id="_04-作用域链" tabindex="-1">04-作用域链 <a class="header-anchor" href="#_04-作用域链" aria-hidden="true">#</a></h2><ol><li>概述 <ol><li>作用域可以理解为函数或变量的生效范围，作用域决定了代码区块中变量和其他资源的可见性</li><li>作用域可分为：全局作用域、函数作用域、块级作用域</li><li>js中访问一个变量，会在当前作用域进行查找，访问不到，会逐级向上查找，查找的过程被称为作用域链</li></ol></li><li>作用域 <ol><li>全局作用域 <ol><li>任何不在函数中或是大括号中声明的变量，都是在全局作用域下，在程序中的任何位置都可以访问</li></ol></li><li>函数作用域 <ol><li>也称为局部作用域，声明在某个函数内部，只能在函数中访问，不能在函数以外访问</li></ol></li><li>块级作用域 <ol><li>在大括号中，使用let和const声明的变量存在于块级作用域，大括号之外不能访问这些变量</li></ol></li><li>词法作用域 <ol><li>又称作静态作用域，变量被创建时就已经确定，而非执行阶段确定的</li></ol></li></ol></li><li>作用域链 <ol><li>当在JavaScript中使用一个变量的时候，首先JavaScript引擎会在当前作用域下寻找该变量，如果没有找到，再到它的上层作用域寻找，以此类推直到找到该变量</li><li>如果在全局作用域下仍然找不到该变量，就会在全局范围内隐士声明该变量（非严格模式下）或直接报错</li></ol></li></ol><h2 id="_05-原型、原型链" tabindex="-1">05-原型、原型链 <a class="header-anchor" href="#_05-原型、原型链" aria-hidden="true">#</a></h2><ol><li><p>概述</p><ol><li>原型是我们创建函数的时候，系统帮我们自动生成的一个对象，主要作用是解决构造函数内部方法内存资源浪费问题。</li><li>在开发中，我们一般把实例对象的一些通用方法放入原型中，在vue里也会给vue的原型添加一些公共类方法来实现所有的组件中可以共享成员</li><li>原型链是js对象的一种查找机制，遵循就近原则。当我们访问一个对象中的成员时，会优先访问自己的，如果自己没有就访问原型的，如果原型也没有，就会访问原型的原型，直到终点null，如果还没有，此时属性就会获取undefined，方法就会报错xxx is not a function</li></ol></li><li><p>原型</p><ol><li>每个函数都有一个特殊的属性叫做—原型prototype</li><li>原型对象身上有一个自由属性constructor指向该函数</li></ol></li><li><p>原型链</p><ol><li>原型对象也有可能拥有原型，并从中继承方法和属性，这种关系被称为原型链</li><li>在对象实例和它的构造器之间建立一个链接，之后通过上朔原型链，在构造器中找到这些属性和方法</li></ol></li><li><p>总结</p><ol><li>一切对象都是继承自Object对象，Object对象直接继承自根源对象null</li><li>一切的函数对象，都是继承自Function对象，Object对象直接继承自Function对象</li><li>Function对象的 <code>_proto_</code> 会指向自己的原型对象，最终还是继承自Object对象</li></ol></li></ol><h2 id="_06-闭包" tabindex="-1">06-闭包 <a class="header-anchor" href="#_06-闭包" aria-hidden="true">#</a></h2><ol><li>概述 <ol><li>闭包是一个可以访问其他函数内部变量的函数，主要作用是解决变量污染问题，也可以用来延长局部变量的生命周期。</li><li>闭包几乎是无处不在的，大多数情况下，在回调函数中闭包是用的最多的</li></ol></li><li>闭包是什么 <ol><li>一个函数被应用包围，这样的组合就是闭包</li><li>每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接的桥梁</li></ol></li><li>使用场景 <ol><li>创建私有变量</li><li>延长变量的生命周期</li></ol></li><li>注意事项 <ol><li>如果不是特定任务使用闭包，在其他函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响</li></ol></li></ol><h2 id="_07-内存泄露" tabindex="-1">07-内存泄露 <a class="header-anchor" href="#_07-内存泄露" aria-hidden="true">#</a></h2><ol><li>概述 <ol><li>内存泄漏一般是指变量的内存没有及时回收，导致内存资源浪费 <ol><li>意外的全局变量</li><li>闭包</li><li>未被清空的定时器</li><li>未被销毁的事件监听</li><li>DOM引用</li></ol></li></ol></li><li>内存泄漏是什么 <ol><li>内存泄漏是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存</li><li>大多数语言提供自动内存管理，称为“垃圾回收机制”</li></ol></li><li>垃圾回收机制 <ol><li>概念：JavaScript具有自动垃圾回收机制，执行环境会负责管理代码执行过程中使用的内存</li><li>原理：垃圾收集器会定期找出哪些不在继续使用的变量，然后释放其内存</li><li>实现方式：标记清除、引用计数 <ol><li>标记清除 <ol><li>当变量进入执行环境时，就标记这个标量为“进入环境“，进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为”离开环境“</li><li>垃圾回收程序运行时，会标记内存中存储的所有变量</li></ol></li><li>引用计数</li></ol></li></ol></li></ol><h2 id="_08-数组中的常用方法" tabindex="-1">08-数组中的常用方法 <a class="header-anchor" href="#_08-数组中的常用方法" aria-hidden="true">#</a></h2><ol><li>遍历方法 <ol><li>map：映射数组，得到一个映射之后的新数组</li><li>filter：筛选数组，返回一个新数组</li><li>forEach：遍历数组，操作会影响原数组</li><li>some：判断数组中是否有元素满足条件，返回布尔值</li><li>every：判断数组中所有元素是否满足条件，返回布尔值</li><li>findIndex：查找元素下标</li><li>reduce：给数组每一个元素执行一次回调，已包含用于数组求和</li></ol></li><li>操作方法 <ol><li>push：末尾新增元素，返回值是新数组的长度</li><li>unshift：开头新增元素，返回值是新数组的长度</li><li>pop：末尾删除元素，返回值是删除的末尾元素</li><li>shift：开头删除元素，返回值是删除的开头元素</li><li>splice：删除指定下标元素，start，deleteCount，...item</li></ol></li><li>其他方法 <ol><li>reverse：反转数组，会修改原数组</li><li>sort：数组排序，会修改原数组</li><li>join：拼接数组元素，返回值是拼接之后的字符串</li><li>slice：提取数组元素，返回值是一个新数组</li><li>indexOf：查询元素是否存在，返回查找到指定元素的第一个索引</li><li>includes：查询元素是否存在，返回一个布尔值</li></ol></li></ol><h2 id="_09-字符串常用方法" tabindex="-1">09-字符串常用方法 <a class="header-anchor" href="#_09-字符串常用方法" aria-hidden="true">#</a></h2><ol><li>indexOf：查询某个字符下标，一般用于判断字符串中是否包含某些字符</li><li>split：切割字符串，返回值是切割后的新数组</li><li>substring：截取字符串，返回值是截取后的新字符串</li><li>replace：替换字符串，返回值是替换后的新字符串</li><li>toLowerCase：转小写</li><li>toUpperCase：转大写</li></ol><h2 id="_10-new操作符" tabindex="-1">10-new操作符 <a class="header-anchor" href="#_10-new操作符" aria-hidden="true">#</a></h2><ol><li><p>作用</p><ol><li>创建一个新对象obj</li><li>将对象与构造函数通过原型链连接起来</li><li>将构造函数中的this绑定到新建的对象obj上</li><li>返回该实例对象</li></ol></li><li><p>手写new操作符</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mynew</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Fn</span><span style="color:#89DDFF;">,...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 1. 创建一个新对象</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 2. 新对象原型指向构造函数原型对象</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 3. 将构造函数的this指向新对象</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#F78C6C;">4.</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">根据返回值判断</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><h2 id="_11-this" tabindex="-1">11-this <a class="header-anchor" href="#_11-this" aria-hidden="true">#</a></h2><ol><li>概述 <ol><li>绝大多数情况下，函数的调用方式决定了this对象的指向</li><li>this关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象</li></ol></li><li>绑定规则 <ol><li>默认绑定 <ol><li>非严格模式下，默认绑定，this指向window；严格模式下，this会绑定到undefined</li></ol></li><li>隐式绑定 <ol><li>函数作为某个对象的方法调用，此时this就指向这个上级对象</li><li>this永远指向最后调用它的对象</li></ol></li><li>new绑定 <ol><li>通过构造函数，new关键字产生的实例对象，此时this指向这个实例对象</li><li>特殊情况，如果new过程，构造函数返回一个对象，则this指向这个对象</li></ol></li></ol></li><li>箭头函数 <ol><li>没有绑定自己的this，箭头函数的this指向它的上一级作用域中的this</li></ol></li></ol><h2 id="_12-高阶函数和柯里化" tabindex="-1">12-高阶函数和柯里化 <a class="header-anchor" href="#_12-高阶函数和柯里化" aria-hidden="true">#</a></h2><ol><li>高阶函数 <ol><li>高阶函数是一个可以接收函数作为参数，甚至返回一个函数的函数</li><li>闭包的实现与回调函数都是属于高阶函数</li></ol></li><li>柯里化 <ol><li>函数柯里化指的是将能够接收多个参数的函数转化为接收单一参数的函数，并且返回新函数，新函数接收余下参数</li><li>函数柯里化主要作用和特点就是参数复用、提前返回、延迟执行</li><li>对于柯里化后的函数来说，当接收的参数数量与原函数的形参数量相同时，执行原函数；当接收的参数数量小于原函数的形参数量时，返回一个函数用于接收剩余的参数</li></ol></li></ol><h2 id="_13-防抖和节流" tabindex="-1">13-防抖和节流 <a class="header-anchor" href="#_13-防抖和节流" aria-hidden="true">#</a></h2><ol><li>定义 <ol><li>防抖：n秒后再执行，若在n秒内被重复触发，则重新计时（debounce）</li><li>节流：n秒内只执行一次，若在n秒内重复触发，只有一次生效（throttled）</li></ol></li><li>应用场景 <ol><li><p>防抖：</p><ol><li><p>搜索框输入，只需用户最后一次输入完成后，再发送请求</p></li><li><p>手机号、邮箱验证输入规则</p></li><li><p>窗口大小，等窗口调整完成后，再计算窗口大小</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debounce</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 定时器变量</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 返回一个函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 判断</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 启动定时器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></li></ol></li><li><p>节流</p><ol><li><p>滚动加载，加载更多，或滚动到底部监听</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">throttle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">wait</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 定义开始时间</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">start</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 返回一个函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取当前的时间戳</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">now</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 判断</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">now</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">start</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wait</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 满足条件,执行回调,修改开始时间</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">start</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">now</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></li></ol></li></ol></li></ol><h2 id="_14-递归" tabindex="-1">14-递归 <a class="header-anchor" href="#_14-递归" aria-hidden="true">#</a></h2><ol><li>概述 <ol><li>递归是一个函数在内部调用自己，这个函数就是递归函数</li><li>核心思想：把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题</li></ol></li><li>应用场景 <ol><li>数组求和</li><li>斐波那契数列</li><li>数组扁平化</li><li>数组对象格式化</li></ol></li></ol><h2 id="_15-数组去重" tabindex="-1">15-数组去重 <a class="header-anchor" href="#_15-数组去重" aria-hidden="true">#</a></h2><ol><li><p>利用Set</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">(arr))</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">(arr)]</span></span>
<span class="line"></span></code></pre></div></li><li><p>filter+indexOf</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 因为indexOf 只能查找到第一个  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>利用Map</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> unique4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">map</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">      </span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><h2 id="_16-数组扁平化" tabindex="-1">16-数组扁平化 <a class="header-anchor" href="#_16-数组扁平化" aria-hidden="true">#</a></h2><ol><li><p>概述</p><ol><li>数组扁平化是指将一个多维数组变为一个一维数组</li></ol></li><li><p>方法</p><ol><li><p>使用flat</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">Infinity</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>使用正则</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(arr)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\[</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">\\]</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li></ol></li></ol><h2 id="_17-for-of可以遍历哪些对象" tabindex="-1">17-for of可以遍历哪些对象 <a class="header-anchor" href="#_17-for-of可以遍历哪些对象" aria-hidden="true">#</a></h2><ol><li>for...of是ES6新增的一个遍历方法，但只限于迭代器（iterator），所以普通对象用for...of遍历是报错的</li><li>可迭代的对象：包括Array、Map、Set、String对象等</li></ol><h2 id="_18-null和undefined" tabindex="-1">18-null和undefined <a class="header-anchor" href="#_18-null和undefined" aria-hidden="true">#</a></h2><ol><li>概述 <ol><li>undefined表示一个变量自然的，最原始的状态</li><li>null表示一个变量被人为的设置为空对象</li></ol></li><li>出现场景 <ol><li>undefined <ul><li>声明了一个变量，但没有赋值</li><li>访问对象上不存在的属性</li><li>函数定义了形参，但没有传递实参</li><li>使用void对表达式求值</li></ul></li><li>null <ul><li>空值</li><li>栈中的变量没有志向堆中的内存对象</li></ul></li></ol></li></ol><h2 id="_19-set和map的区别" tabindex="-1">19-Set和Map的区别 <a class="header-anchor" href="#_19-set和map的区别" aria-hidden="true">#</a></h2><ol><li>Set <ul><li>成员不能重复</li><li>只有键值，没有键名，有点类似数组</li><li>可以遍历，方法有add、delete、has</li></ul></li><li>Map <ul><li>本质上是键值对的集合，类似集合</li><li>可以遍历，方法很多，可以跟各种数据格式转换</li></ul></li></ol><h2 id="_20-delete使用原则" tabindex="-1">20-delete使用原则 <a class="header-anchor" href="#_20-delete使用原则" aria-hidden="true">#</a></h2><ol><li>delete能删除的 <ul><li>可配置对象的属性</li><li>隐式声明的全局变量</li><li>用户定义的属性</li></ul></li><li>delete不能删除的 <ol><li>显式声明的全局变量</li><li>内置对象的内置属性</li><li>一个对象从原型继承而来的属性</li></ol></li></ol><h2 id="_21-箭头函数" tabindex="-1">21-箭头函数 <a class="header-anchor" href="#_21-箭头函数" aria-hidden="true">#</a></h2><ol><li>基本语法 <ol><li>参数 <ul><li>如果箭头函数没有参数，直接写一个空括号即可</li><li>如果箭头函数参数只有一个，可以省略包裹参数的括号</li><li>如果箭头函数有多个参数，将参数依次用逗号分割，包裹在括号中即可</li></ul></li><li>函数体 <ul><li>如果函数体只有一句代码，返回的是某个变量或简单js表达式，可以省略大括号</li><li>如果函数体只有一句代码，返回的是一个对象，可以用小括号包裹返回的对象</li><li>如果函数体只有一句代码，并且没有返回值，可以在这条语句前加一个void关键字</li></ul></li></ol></li><li>箭头函数与普通函数的区别 <ol><li>语法更加简洁、清晰</li><li>箭头函数不会创建自己的this <ul><li>箭头函数没有自己的this，指向定义时所处的外层执行环境的this，且永远不会改变</li><li>call()/apply()/bind()无法改变箭头函数中this的指向</li><li>箭头函数不能作为构造函数使用</li><li>箭头函数没有原型prototype、</li></ul></li></ol></li></ol><h2 id="_22-es6新特性" tabindex="-1">22-ES6新特性 <a class="header-anchor" href="#_22-es6新特性" aria-hidden="true">#</a></h2><ol><li>变量和作用域</li><li>原生对象的方法扩展 <ol><li>String <ul><li>repeat()方法</li><li>模板字符串</li></ul></li><li>RegExp <ul><li>u/y/s修饰符</li><li>第一个参数是正则表达式，指定第二个参数不再报错</li></ul></li><li>Number <ul><li>parseInt()方法</li><li>二进制八进制新写法</li></ul></li><li>Function <ul><li>函数参数默认值</li><li>rest参数</li><li>函数内部严格模式</li><li>箭头函数</li></ul></li><li>Array <ul><li>扩展运算符...</li></ul></li><li>Object <ul><li><a href="http://Object.is" target="_blank" rel="noreferrer">Object.is</a>()</li><li>Object.assign()</li><li>Object.keys()</li><li>Object.values()</li></ul></li></ol></li><li>数据结构Set和Map <ol><li>Set <ul><li>类似于数组的数据结构，存储的成员都是不重复的</li></ul></li><li>WeakSet <ul><li>类似于Set，区别在于成员只能是对象类型；对象都是弱引用</li></ul></li><li>Map <ul><li>Map对象保存键值对，并且能够记住键的原始插入顺序</li></ul></li><li>WeakMap <ul><li>类似于Map，区别在于只接受对象作为键名；键名所指向的对象不计入垃圾回收机制</li></ul></li></ol></li><li>Proxy和Reflect <ol><li>Proxy <ul><li>对目标对象加上一层拦截，外界对对象的访问都必须通过这层拦截器，对外界的访问进行过滤和改写</li></ul></li><li>Reflect <ul><li>将Object对象上一些属于语言内部的方法放在Reflect上；修改Object对象上的某些方法的返回值，使得更加合理化</li></ul></li></ol></li><li>class、module <ol><li>class <ul><li>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用</li></ul></li><li>module <ul><li>ES6模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量</li></ul></li></ol></li></ol><h2 id="_23-哪些类型可以被扩展操作符-扩展" tabindex="-1">23-哪些类型可以被扩展操作符...扩展 <a class="header-anchor" href="#_23-哪些类型可以被扩展操作符-扩展" aria-hidden="true">#</a></h2><ol><li>适用类型：数组、对象、字符串 <ul><li>复杂数据类型都可以，当要转化为可迭代数据结构时可设置对象的迭代器对扩展出来的值进行操作</li><li>基本数据类型只有String可以适用扩展运算符</li></ul></li><li>使用场景 <ol><li>函数调用传参时</li><li>数组里push多个元素</li><li>合并数组时</li><li>扩展运算符后面可以跟表达式</li></ol></li></ol><h2 id="_24-call、apply、bind的作用和区别" tabindex="-1">24-call、apply、bind的作用和区别 <a class="header-anchor" href="#_24-call、apply、bind的作用和区别" aria-hidden="true">#</a></h2><ol><li>作用 <ul><li>都可以改变函数内部的this指向</li></ul></li><li>区别 <ul><li>call和apply会立即调用函数，bind不会立即执行而是生成一个修改this之后的新函数</li><li>call和bind是列表传参，apply是数组或伪数组传参</li></ul></li></ol>`,49),e=[p];function i(t,c,r,y,F,D){return a(),s("div",null,e)}const C=l(o,[["render",i]]);export{A as __pageData,C as default};
