import{_ as s,c as n,o as e,d as a,a as l,b as i}from"./app.c282a12f.js";const v=JSON.parse('{"title":"Java基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-Java基础全程学习内容","slug":"_01-java基础全程学习内容","link":"#_01-java基础全程学习内容","children":[{"level":3,"title":"1.1-第一阶段","slug":"_1-1-第一阶段","link":"#_1-1-第一阶段","children":[]},{"level":3,"title":"1.2-第二阶段","slug":"_1-2-第二阶段","link":"#_1-2-第二阶段","children":[]},{"level":3,"title":"1.3-第三阶段","slug":"_1-3-第三阶段","link":"#_1-3-第三阶段","children":[]}]},{"level":2,"title":"02-Java语言概述","slug":"_02-java语言概述","link":"#_02-java语言概述","children":[{"level":3,"title":"2.1-Java程序编写和执行的过程","slug":"_2-1-java程序编写和执行的过程","link":"#_2-1-java程序编写和执行的过程","children":[]},{"level":3,"title":"2.2-编写时要求","slug":"_2-2-编写时要求","link":"#_2-2-编写时要求","children":[]},{"level":3,"title":"2.3-编译时要求","slug":"_2-3-编译时要求","link":"#_2-3-编译时要求","children":[]}]},{"level":2,"title":"03-变量与运算符","slug":"_03-变量与运算符","link":"#_03-变量与运算符","children":[{"level":3,"title":"3.1-标识符","slug":"_3-1-标识符","link":"#_3-1-标识符","children":[]},{"level":3,"title":"3.2-变量","slug":"_3-2-变量","link":"#_3-2-变量","children":[]},{"level":3,"title":"3.3-Java的数据类型","slug":"_3-3-java的数据类型","link":"#_3-3-java的数据类型","children":[]},{"level":3,"title":"3.5-基本数据类型运算规则","slug":"_3-5-基本数据类型运算规则","link":"#_3-5-基本数据类型运算规则","children":[]}]},{"level":2,"title":"04-流程控制语句","slug":"_04-流程控制语句","link":"#_04-流程控制语句","children":[{"level":3,"title":"4.1-三种循环的选择","slug":"_4-1-三种循环的选择","link":"#_4-1-三种循环的选择","children":[]}]},{"level":2,"title":"05-数组","slug":"_05-数组","link":"#_05-数组","children":[{"level":3,"title":"5.1-数组的概述","slug":"_5-1-数组的概述","link":"#_5-1-数组的概述","children":[]},{"level":3,"title":"5.2-一维数组的使用","slug":"_5-2-一维数组的使用","link":"#_5-2-一维数组的使用","children":[]},{"level":3,"title":"5.3-二维数组的使用","slug":"_5-3-二维数组的使用","link":"#_5-3-二维数组的使用","children":[]},{"level":3,"title":"5.4-数组常用的算法","slug":"_5-4-数组常用的算法","link":"#_5-4-数组常用的算法","children":[]},{"level":3,"title":"5.5-Arrays工具类的使用","slug":"_5-5-arrays工具类的使用","link":"#_5-5-arrays工具类的使用","children":[]},{"level":3,"title":"5.6-数组中常见的异常","slug":"_5-6-数组中常见的异常","link":"#_5-6-数组中常见的异常","children":[]}]},{"level":2,"title":"06-面向对象(基础)","slug":"_06-面向对象-基础","link":"#_06-面向对象-基础","children":[{"level":3,"title":"6.1-类、对象","slug":"_6-1-类、对象","link":"#_6-1-类、对象","children":[]},{"level":3,"title":"6.2-Java中内存结构的划分","slug":"_6-2-java中内存结构的划分","link":"#_6-2-java中内存结构的划分","children":[]},{"level":3,"title":"6.3-类的成员","slug":"_6-3-类的成员","link":"#_6-3-类的成员","children":[]},{"level":3,"title":"6.4-oop特征之一：封装性","slug":"_6-4-oop特征之一-封装性","link":"#_6-4-oop特征之一-封装性","children":[]},{"level":3,"title":"6.5-三个知识点","slug":"_6-5-三个知识点","link":"#_6-5-三个知识点","children":[]},{"level":3,"title":"6.6-package、import关键字","slug":"_6-6-package、import关键字","link":"#_6-6-package、import关键字","children":[]},{"level":3,"title":"6.7-对象数组","slug":"_6-7-对象数组","link":"#_6-7-对象数组","children":[]}]},{"level":2,"title":"07-面向对象(进阶)","slug":"_07-面向对象-进阶","link":"#_07-面向对象-进阶","children":[{"level":3,"title":"7.1-关键字：this","slug":"_7-1-关键字-this","link":"#_7-1-关键字-this","children":[]},{"level":3,"title":"7.2-面向对象特征二—继承","slug":"_7-2-面向对象特征二—继承","link":"#_7-2-面向对象特征二—继承","children":[]},{"level":3,"title":"7.3-方法的重写","slug":"_7-3-方法的重写","link":"#_7-3-方法的重写","children":[]},{"level":3,"title":"7.4-关键字：super","slug":"_7-4-关键字-super","link":"#_7-4-关键字-super","children":[]},{"level":3,"title":"7.5-面向对象的特征三—多态","slug":"_7-5-面向对象的特征三—多态","link":"#_7-5-面向对象的特征三—多态","children":[]},{"level":3,"title":"7.6-Object类","slug":"_7-6-object类","link":"#_7-6-object类","children":[]},{"level":3,"title":"7.7-复习","slug":"_7-7-复习","link":"#_7-7-复习","children":[]}]},{"level":2,"title":"08-面向对象(高级)","slug":"_08-面向对象-高级","link":"#_08-面向对象-高级","children":[{"level":3,"title":"8.1-关键字：static","slug":"_8-1-关键字-static","link":"#_8-1-关键字-static","children":[]},{"level":3,"title":"8.2-单例模式","slug":"_8-2-单例模式","link":"#_8-2-单例模式","children":[]},{"level":3,"title":"8.3-类的成员四—代码块","slug":"_8-3-类的成员四—代码块","link":"#_8-3-类的成员四—代码块","children":[]},{"level":3,"title":"8.4-属性赋值的过程","slug":"_8-4-属性赋值的过程","link":"#_8-4-属性赋值的过程","children":[]},{"level":3,"title":"8.5-关键字：final","slug":"_8-5-关键字-final","link":"#_8-5-关键字-final","children":[]},{"level":3,"title":"8.6-关键字：abstract","slug":"_8-6-关键字-abstract","link":"#_8-6-关键字-abstract","children":[]},{"level":3,"title":"8.7-关键字：interface","slug":"_8-7-关键字-interface","link":"#_8-7-关键字-interface","children":[]},{"level":3,"title":"8.8-类的成员五—内部类","slug":"_8-8-类的成员五—内部类","link":"#_8-8-类的成员五—内部类","children":[]},{"level":3,"title":"8.9-枚举类","slug":"_8-9-枚举类","link":"#_8-9-枚举类","children":[]},{"level":3,"title":"8.10-注解","slug":"_8-10-注解","link":"#_8-10-注解","children":[]},{"level":3,"title":"8.11-包装类","slug":"_8-11-包装类","link":"#_8-11-包装类","children":[]},{"level":3,"title":"8.12-复习","slug":"_8-12-复习","link":"#_8-12-复习","children":[]}]},{"level":2,"title":"09-异常处理","slug":"_09-异常处理","link":"#_09-异常处理","children":[{"level":3,"title":"9.1-常见错误和异常","slug":"_9-1-常见错误和异常","link":"#_9-1-常见错误和异常","children":[]},{"level":3,"title":"9.2-异常的处理","slug":"_9-2-异常的处理","link":"#_9-2-异常的处理","children":[]},{"level":3,"title":"9.3-手动抛出异常","slug":"_9-3-手动抛出异常","link":"#_9-3-手动抛出异常","children":[]},{"level":3,"title":"9.4-自定义异常类","slug":"_9-4-自定义异常类","link":"#_9-4-自定义异常类","children":[]},{"level":3,"title":"9.5-复习","slug":"_9-5-复习","link":"#_9-5-复习","children":[]}]},{"level":2,"title":"10-多线程","slug":"_10-多线程","link":"#_10-多线程","children":[{"level":3,"title":"10.1-相关概念","slug":"_10-1-相关概念","link":"#_10-1-相关概念","children":[]},{"level":3,"title":"10.2-创建和启动线程","slug":"_10-2-创建和启动线程","link":"#_10-2-创建和启动线程","children":[]},{"level":3,"title":"10.3-线程的常用方法与生命周期","slug":"_10-3-线程的常用方法与生命周期","link":"#_10-3-线程的常用方法与生命周期","children":[]}]}],"relativePath":"Java/note_java/基础阶段/JavaSE.md"}'),t={name:"Java/note_java/基础阶段/JavaSE.md"},p=a('<h1 id="java基础" tabindex="-1">Java基础 <a class="header-anchor" href="#java基础" aria-hidden="true">#</a></h1><h2 id="_01-java基础全程学习内容" tabindex="-1">01-Java基础全程学习内容 <a class="header-anchor" href="#_01-java基础全程学习内容" aria-hidden="true">#</a></h2><h3 id="_1-1-第一阶段" tabindex="-1">1.1-第一阶段 <a class="header-anchor" href="#_1-1-第一阶段" aria-hidden="true">#</a></h3><ul><li>Java概述、关键字、标识符、变量、运算符、流程控制语句、数组</li></ul><h3 id="_1-2-第二阶段" tabindex="-1">1.2-第二阶段 <a class="header-anchor" href="#_1-2-第二阶段" aria-hidden="true">#</a></h3><ul><li>类及类的内部成员</li><li>面向对象的三大特征</li><li>其他关键字的使用</li></ul><h3 id="_1-3-第三阶段" tabindex="-1">1.3-第三阶段 <a class="header-anchor" href="#_1-3-第三阶段" aria-hidden="true">#</a></h3><ul><li>异常处理、多线程、IO流、集合框架、反射、网络编程、新特性、其他常用API等</li></ul><h2 id="_02-java语言概述" tabindex="-1">02-Java语言概述 <a class="header-anchor" href="#_02-java语言概述" aria-hidden="true">#</a></h2><h3 id="_2-1-java程序编写和执行的过程" tabindex="-1">2.1-Java程序编写和执行的过程 <a class="header-anchor" href="#_2-1-java程序编写和执行的过程" aria-hidden="true">#</a></h3><ul><li>编写：将java代码编写在.java结尾的源文件中</li><li>编译：针对于.java的源文件进行编译操作。格式：javac 源文件名.java</li><li>运行：针对编译生成的字节码文件，进行解释运行。格式：java 字节码文件名</li></ul><h3 id="_2-2-编写时要求" tabindex="-1">2.2-编写时要求 <a class="header-anchor" href="#_2-2-编写时要求" aria-hidden="true">#</a></h3><ol><li>mian()方法的格式是固定的。表示程序的入口。格式：public static void main(String[] args){} <ul><li>只能变化String args[]结构，可以写成：String args[] 或 String[] a</li></ul></li><li>Java程序是严格区分大小写的</li><li>每一行执行语句必须以 ；结尾</li><li>一个java文件中只能声明一个类由public修饰，且该类名必须与源文件名相同</li></ol><h3 id="_2-3-编译时要求" tabindex="-1">2.3-编译时要求 <a class="header-anchor" href="#_2-3-编译时要求" aria-hidden="true">#</a></h3><ol><li><p>编译不通过：语法可能存在问题</p></li><li><p>编译之后会生成一个或多个字节码文件，一个字节码是文件对应一个java类</p></li><li><p>文档注释 javadoc -d mydoc -author -version HelloWorld.java 生成一个html文档(介绍该类)</p></li></ol><h2 id="_03-变量与运算符" tabindex="-1">03-变量与运算符 <a class="header-anchor" href="#_03-变量与运算符" aria-hidden="true">#</a></h2><h3 id="_3-1-标识符" tabindex="-1">3.1-标识符 <a class="header-anchor" href="#_3-1-标识符" aria-hidden="true">#</a></h3><ul><li>命名规则 <ul><li>由字母、数字、下划线和$组成</li><li>不能由数字开头</li><li>不能使用关键字和保留字、但是可以包含</li><li>严格区分大小写，长度无限制</li><li>标识符不能包含空格</li></ul></li><li>命名规范 <ul><li>包名：多单词组成时，所有字母都小写</li><li>类名、接口名：多单词组成时，所有单词的首字母大写</li><li>变量名、方法名：多单词组成时，第一个单词的首字母小写，第二个及以后单词首字母大写</li><li>常量名：所有字母都大写，多单词时，每个字母用下划线连接</li></ul></li></ul><h3 id="_3-2-变量" tabindex="-1">3.2-变量 <a class="header-anchor" href="#_3-2-变量" aria-hidden="true">#</a></h3><ul><li>构成及声明格式 <ul><li>构成：数据类型、变量名、存储的值</li><li>格式：数据类型 变量名 = 变量值</li></ul></li><li>说明 <ul><li>变量都有作用域，只在作用域内有效，作用域：{}</li><li>同一个作用域内，不能声明两个同名的变量</li><li>变量值在赋值时，必须满足变量的数据类型，并且在数据类型有效的范围内变化</li></ul></li></ul><h3 id="_3-3-java的数据类型" tabindex="-1">3.3-Java的数据类型 <a class="header-anchor" href="#_3-3-java的数据类型" aria-hidden="true">#</a></h3><ul><li><p>基本数据类型(8种)：</p><ul><li><p>整型：byte、short、int、long(赋值时必须以L结尾)</p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节=8bit</td><td>-128~127</td></tr><tr><td>short</td><td>2字节</td><td>-2的15次方~2的15次方-1</td></tr><tr><td>int</td><td>4字节</td><td>-2的31次方~2的31次方-1</td></tr><tr><td>long</td><td>8字节</td><td>-2的63次方~2的63次方-1</td></tr></tbody></table></li><li><p>浮点型：float(可以精确到7位有效数字，后缀为F)、double</p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><ul><li>浮点型变量的精度不高，开发中使用应以BigDecimal类替换浮点型变量</li></ul></li><li><p>字符型：char</p><ul><li>两个字节</li><li>表示形式1：使用 &#39;&#39; 表示，内部有且仅有一个字符</li><li>表示形式2：使用 &#39;&#39; 表示，直接使用Unicode值来表示字符型常量，如：&#39;\\u0036&#39;</li><li>表示形式3：使用 &#39;&#39; 表示，使用转义字符</li><li>表示形式4：使用具体字符对应的值(ASCII)</li></ul></li><li><p>布尔型：boolean</p><ul><li>在分配内存时，会被看成0和1，分配的内存和int类型相同</li></ul></li></ul></li><li><p>引用数据类型</p><ul><li>类(class)</li><li>数组(array)</li><li>接口(interface)</li><li>枚举(enum)</li><li>注解(annotation)</li><li>记录(record)</li></ul></li></ul><h3 id="_3-5-基本数据类型运算规则" tabindex="-1">3.5-基本数据类型运算规则 <a class="header-anchor" href="#_3-5-基本数据类型运算规则" aria-hidden="true">#</a></h3><ul><li>自动类型提升 <ul><li>当容量小的变量与容量大的变量做运算时，结果自动转为容量大的数据类型</li><li>特殊：byte和short运算时，结果为int类型</li><li>long超出8个字节，必须使用L结尾；低于8个字节int会转为long</li></ul></li><li>强制类型转换 <ul><li>强制类型转换是将容量大的变量类型转换为容量小的变量类型</li><li>强制类型转换需要使用强转符：（），在()内指明要转换为的数据类型</li><li>强制类型转换可能会造成精度丢失；如float-&gt;int，int-&gt;byte</li></ul></li></ul><ol start="5"><li><p>String数据类型</p><ul><li>只能参与连接运算，且可以和boolean运算，结果为String类型</li></ul></li><li><p>运算符</p><ul><li>%，符号与被模数符号相同</li></ul></li></ol><h2 id="_04-流程控制语句" tabindex="-1">04-流程控制语句 <a class="header-anchor" href="#_04-流程控制语句" aria-hidden="true">#</a></h2><h3 id="_4-1-三种循环的选择" tabindex="-1">4.1-三种循环的选择 <a class="header-anchor" href="#_4-1-三种循环的选择" aria-hidden="true">#</a></h3><ul><li>遍历有明显的循环次数（范围）的需求，选择for循环</li><li>遍历没有明显的循环次数（范围）的需求，选择while循环</li><li>如果循环体语句块至少执行一次，可以考虑使用do-while循环</li></ul><h2 id="_05-数组" tabindex="-1">05-数组 <a class="header-anchor" href="#_05-数组" aria-hidden="true">#</a></h2><h3 id="_5-1-数组的概述" tabindex="-1">5.1-数组的概述 <a class="header-anchor" href="#_5-1-数组的概述" aria-hidden="true">#</a></h3><ul><li>数组可以理解为多个数据的组合</li><li>是程序中的容器：数组、集合框架(List、Map、Set)</li><li>数组存储的数据的特点：依次紧密排列的、有序的、可重复的</li><li>此时的数组、集合框架都是在内存中对数据的存储</li><li>数组的其他特点：一旦初始化，其长度就是确定的、不可更改的</li></ul><h3 id="_5-2-一维数组的使用" tabindex="-1">5.2-一维数组的使用 <a class="header-anchor" href="#_5-2-一维数组的使用" aria-hidden="true">#</a></h3><ul><li>数组的初始化</li><li>数组元素的调用</li><li>数组属性</li><li>数组的遍历</li><li>数组元素的默认初始化值</li><li>一维数组的内存解析</li></ul><h3 id="_5-3-二维数组的使用" tabindex="-1">5.3-二维数组的使用 <a class="header-anchor" href="#_5-3-二维数组的使用" aria-hidden="true">#</a></h3><h3 id="_5-4-数组常用的算法" tabindex="-1">5.4-数组常用的算法 <a class="header-anchor" href="#_5-4-数组常用的算法" aria-hidden="true">#</a></h3><ul><li>数组特征值的计算：最大值、最小值、求和、求平均值</li><li>数组元素的赋值：杨辉三角、随机六位数字、回形数</li><li>数组的赋值、复制</li><li>数组的反转</li><li>数组的扩容、缩容</li><li>数组的查找 <ul><li>线性查找</li><li>二分查找（顺序的）</li></ul></li><li>数组的排序 <ul><li>冒泡排序 (最简单)</li><li>快速排序 (最常用)</li></ul></li></ul><h3 id="_5-5-arrays工具类的使用" tabindex="-1">5.5-Arrays工具类的使用 <a class="header-anchor" href="#_5-5-arrays工具类的使用" aria-hidden="true">#</a></h3><ul><li>toString()</li><li>sort()</li><li>binarySearch()</li></ul><h3 id="_5-6-数组中常见的异常" tabindex="-1">5.6-数组中常见的异常 <a class="header-anchor" href="#_5-6-数组中常见的异常" aria-hidden="true">#</a></h3><ul><li>ArrayIndexOutOfBoundsException</li><li>NullPointerException</li></ul><h2 id="_06-面向对象-基础" tabindex="-1">06-面向对象(基础) <a class="header-anchor" href="#_06-面向对象-基础" aria-hidden="true">#</a></h2><h3 id="_6-1-类、对象" tabindex="-1">6.1-类、对象 <a class="header-anchor" href="#_6-1-类、对象" aria-hidden="true">#</a></h3><ul><li>类：抽象的，概念上的定义</li><li>对象：具体的，类的实例</li><li>面向对象三步骤 <ul><li>步骤一：创建一个类，并设计类的内部成员（属性、方法）</li><li>步骤二：创建类的对象，例：Person person = new Person()</li><li>步骤三：通过对象调用类内部声明的属性或方法，完成对应功能</li></ul></li></ul><h3 id="_6-2-java中内存结构的划分" tabindex="-1">6.2-Java中内存结构的划分 <a class="header-anchor" href="#_6-2-java中内存结构的划分" aria-hidden="true">#</a></h3><ul><li><p>虚拟机栈：</p><ul><li><p>以栈帧为基本单位，有入栈和出栈操作，</p></li><li><p>每个栈帧入栈操作对应一个方法；</p></li><li><p>方法的局部变量存储在栈帧中。</p></li></ul></li><li><p>堆空间：</p><ul><li>new出来的结构(数组、对象)</li><li>数组的元素在堆中</li><li>对象的成员变量在堆中</li></ul></li><li><p>方法区：加载的类的模板结构</p></li><li><p>程序计数器</p></li><li><p>本地方法栈</p></li><li><p>线程共享：方法区、堆空间</p></li><li><p>线程独占：虚拟机栈、本地方法栈、程序计数器</p></li></ul><h3 id="_6-3-类的成员" tabindex="-1">6.3-类的成员 <a class="header-anchor" href="#_6-3-类的成员" aria-hidden="true">#</a></h3>',46),r=l("ul",null,[l("li",null,[i("类的成员之一：属性(成员变量) "),l("ul",null,[l("li",null,[i("属性和局部变量 "),l("ul",null,[l("li",null,"声明的位置不同，类中和方法中"),l("li",null,"内存中的存放位置不同，堆中和栈帧中"),l("li",null,"作用域不同"),l("li",null,"权限修饰符，属性可以有，局部变量没有"),l("li",null,"初始化值：属性有默认值，局部变量调用前必须显式赋值"),l("li",null,"生命周期不同，属性随着对象的创建而创建，局部变量随着方法的调用而创建")])]),l("li",null,"属性 <=> 成员变量 <=> 字段、域 <=> field")])]),l("li",null,[i("类的成员之二：方法 "),l("ul",null,[l("li",{方法体:""},"方法的声明：权限修饰符 返回值类型 方法名(形参列表)"),l("li",null,[i("方法的重载： "),l("ul",null,[l("li",null,"两同一不同：同一个类、相同的方法名、不同的参数列表(个数、类型)"),l("li",null,"通过方法名、参数列表确定调用一个指定的方法")])]),l("li",null,[i("方法的参数传递机制（值传递机制） "),l("ul",null,[l("li",null,"如果是基本数据类型，则将实参保存的数据值传递给形参"),l("li",null,"如果是引用数据类型，则将实参保存的地址值传递给形参")])])])]),l("li",null,[i("类的成员之三：构造器 "),l("ul",null,[l("li",null,"定义：权限修饰符 类名(形参列表){}"),l("li",null,[i("作用： "),l("ul",null,[l("li",null,"搭配上new，创建类的实例对象"),l("li",null,"初始化对象的成员变量")])])])])],-1),o=a(`<h3 id="_6-4-oop特征之一-封装性" tabindex="-1">6.4-oop特征之一：封装性 <a class="header-anchor" href="#_6-4-oop特征之一-封装性" aria-hidden="true">#</a></h3><ul><li>修饰符 <ul><li>Java规定了4中权限修饰，分别是public、protected、缺省、private</li><li>我们可以使用4种权限修饰符来修饰类及类的内部成员，当这些成员被调用时，体现可见性的大小</li></ul></li><li>使用场景 <ul><li>场景一：私有化类的属性，通过提供公共的get和set方法，对此属性进行获取和修改</li><li>场景二：将类中不需要对外暴露的方法，设置为private</li><li>场景三：单例模式中构造器设置为private，避免在类的外部创建实例</li></ul></li><li>理论上 <ul><li>高内聚：类的内部操作数据自己完成，不允许外部干涉</li><li>低耦合：仅暴露少量的方法给外部使用，尽量避免外部调用</li></ul></li></ul><h3 id="_6-5-三个知识点" tabindex="-1">6.5-三个知识点 <a class="header-anchor" href="#_6-5-三个知识点" aria-hidden="true">#</a></h3><ul><li>对象的成员变量的赋值过程 <ul><li>可以给属性赋值的位置 <ul><li>默认初始化</li><li>显式赋值</li><li>构造器</li><li>对象.属性</li><li>对象.方法</li></ul></li><li>执行顺序 <ul><li>1 -&gt; 2 -&gt; 3 -&gt; 4/5</li></ul></li></ul></li><li>JavaBean <ul><li>符合以下标准的java类 <ul><li>类是公共的</li><li>有一个无参的公共构造器</li><li>有属性，且有对应的get和set方法</li></ul></li></ul></li><li>UML类图</li></ul><h3 id="_6-6-package、import关键字" tabindex="-1">6.6-package、import关键字 <a class="header-anchor" href="#_6-6-package、import关键字" aria-hidden="true">#</a></h3><ul><li>package：指明声明的类所属的包</li><li>import：当前类中，如果要使用其他包下的类，原则上需要导入</li></ul><h3 id="_6-7-对象数组" tabindex="-1">6.7-对象数组 <a class="header-anchor" href="#_6-7-对象数组" aria-hidden="true">#</a></h3><ul><li>String[]</li></ul><h2 id="_07-面向对象-进阶" tabindex="-1">07-面向对象(进阶) <a class="header-anchor" href="#_07-面向对象-进阶" aria-hidden="true">#</a></h2><h3 id="_7-1-关键字-this" tabindex="-1">7.1-关键字：this <a class="header-anchor" href="#_7-1-关键字-this" aria-hidden="true">#</a></h3><ol><li>声明一个属性对应的set方法时，通过形参给对应的属性赋值 <ul><li>当形参名和属性名一致时，可以通过this修饰属性，从而区分形参和属性</li></ul></li><li>this的理解：当前创建的对象(方法) 或 当前正在创建的对象(构造器)</li><li>this可以调用的结构：成员变量、方法、构造器 <ul><li>this调用属性 <ul><li>如果方法的形参和对象的属性重名，必须使用this进行区分，使用this修饰的变量即为属性(成员变量)，没有使用this修饰的属性即为局部变量</li></ul></li><li>this调用方法 <ul><li>通过对象调用方法，可以调用该对象的属性和其他方法，此时可以使用this调用属性和其他方法，this表示调用当前属性和方法所属的对象。一般情况下，会省略this</li></ul></li><li>this调用构造器 <ul><li>格式：通过 this(形参列表) 在类的构造器中调用其他构造器</li><li>要求：this(形参列表) 必须声明在构造器的首行</li><li>结论：this(形参列表) 在构造器中最多声明一个</li><li>如果一个类中有n个构造器，则最多有n-1个 this(形参列表)；不能调用自己</li></ul></li></ul></li></ol><h3 id="_7-2-面向对象特征二—继承" tabindex="-1">7.2-面向对象特征二—继承 <a class="header-anchor" href="#_7-2-面向对象特征二—继承" aria-hidden="true">#</a></h3><ol><li><p>继承的好处</p><ul><li>减少了代码冗余，提高了代码的可复用性</li><li>继承的出现，更有利于功能的扩展</li></ul></li><li><p>继承的格式</p><ul><li><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 属性</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 方法</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div></li><li><p>类A：父类、超类、基类、superClass</p></li><li><p>类B：子类、派生类、subClass</p></li></ul></li><li><p>有了继承性之后</p></li></ol><ul><li>子类获取到父类中所有的属性和方法</li><li>由于封装性的影响，可能子类中不能直接调用父类中声明的属性或方法</li><li>子类在继承父类之后，还可以扩展自己的功能(特有的属性、方法)</li></ul><ol start="4"><li><p>默认父类</p><ul><li>Java中声明的类，如果没有显式声明其父类，则默认继承于java.lang.Object</li></ul></li></ol><h3 id="_7-3-方法的重写" tabindex="-1">7.3-方法的重写 <a class="header-anchor" href="#_7-3-方法的重写" aria-hidden="true">#</a></h3><ol><li>重写 <ul><li>子类覆盖父类中同名同参数的方法</li></ul></li><li>为什么需要重写 <ul><li>子类在继承父类之后，就获取了父类所声明的所有方法。但父类中的方法可能不太适用于子类，此时就要对继承的方法进行覆盖、覆写的操作</li></ul></li><li>方法重写的规则 <ul><li>父类被重写的方法与子类重写的方法的方法名和形参列表必须相同</li><li>子类重写的方法权限修饰符不得小于父类被重写方法的权限修饰符 <ul><li>子类不能重写父类private修饰的方法</li></ul></li><li>关于返回值类型 <ul><li>父类被重写方法的返回值类型是void，则子类重写方法的返回值类型必须是void</li><li>父类被重写方法的返回值类型是基本数据类型，则子类重写方法的返回值类型必须是基本数据类型</li><li>父类被重写方法的返回值类型是引用数据类型，则子类重写方法的返回值类型可以是引用数据类型，也可以是被重写方法的返回值类型的子类</li></ul></li></ul></li></ol><h3 id="_7-4-关键字-super" tabindex="-1">7.4-关键字：super <a class="header-anchor" href="#_7-4-关键字-super" aria-hidden="true">#</a></h3><ol><li>为什么需要super <ul><li>父类的方法在子类中被重写，是否还可以在子类中调用父类中被重写的方法</li><li>子类中出现和父类中同名的属性，如何进行区分</li></ul></li><li>super可以调用的结构 <ul><li>属性、方法 <ul><li>如果子类重写了父类的方法或者出现了与父类同名的属性，则必须使用super.声明，显式的调用父类中的方法或属性</li></ul></li><li>构造器 <ul><li>子类继承时，不会继承父类的构造器，但可以通过super(形参列表)调用父类的构造器</li><li>super(形参列表)必须放在首行</li><li>在构造器中，super和this只能出现一个</li><li>子类构造器中，若没有this或者super，则默认调用super(形参列表)</li><li>通过子类的构造器创建对象时，一定会直接或者间接调用父类的构造器，正因为调用了父类的构造器，才会将父类声明的属性或方法加载到内存，供子类对象使用</li></ul></li></ul></li></ol><h3 id="_7-5-面向对象的特征三—多态" tabindex="-1">7.5-面向对象的特征三—多态 <a class="header-anchor" href="#_7-5-面向对象的特征三—多态" aria-hidden="true">#</a></h3><ol><li><p>多态性的体现</p><ul><li>子类对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类的引用）</li></ul></li><li><p>多态性的应用</p><ul><li>虚拟方法调用 <ul><li>编译时，认为方法是左边声明的父类的类型的方法</li><li>运行时，实际执行的是子类重写的父类的方法</li><li>编译看左边，运行看右边（方法）</li><li>编译、运行都看左边（属性）</li></ul></li></ul></li><li><p>多态性的使用前提</p><ul><li>要有类的继承</li><li>要有方法的重写</li></ul></li><li><p>多态的适用性</p><ul><li>仅适用于方法，不适用属性</li></ul></li><li><p>多态的好处和弊端</p><ul><li>好处 <ul><li>极大的减少了代码的冗余，不需要定义多个重载的方法</li></ul></li><li>弊端 <ul><li>在多态的场景下，创建了子类的对象，也加载了子类特有的属性和方法，但是由于声明为父类的引用，导致没有办法直接调用子类特有的属性和方法。</li></ul></li></ul></li><li><p>向下转型</p><ul><li>向上转型 &lt;=&gt; 多态</li><li>向下转型 Man man = (Man) person</li><li>使用instanceof可以判断一个对象是否是某个对象的实例</li></ul></li></ol><h3 id="_7-6-object类" tabindex="-1">7.6-Object类 <a class="header-anchor" href="#_7-6-object类" aria-hidden="true">#</a></h3><ol><li><p>概述</p><ul><li>任何一个类都间接或直接继承于Object类</li><li>Object类中没有声明属性</li><li>Object类提供了一个空参的构造器</li><li>Object类中的方法(重点)</li></ul></li><li><p>常用方法</p><ul><li>重点方法 <ul><li>equals()、toString()</li></ul></li><li>了解方法 <ul><li>clone()：克隆一个对象</li><li>finalize()：垃圾回收器回收此对象时调用(临死之前的遗言)，可能导致内部出现循环引用</li></ul></li><li>目前不需关注 <ul><li>getClass()</li><li>反射：hashCode()</li><li>多线程：notify()、notifyAll()、wait()、wait(xx)、wait(xx,yy)</li></ul></li></ul></li><li><p>equals()的使用</p><ul><li><p>适用性</p><ul><li>任何引用类型都可以使用</li></ul></li><li><p>子类使用说明</p><ul><li>比较两个对象的引用地址是否相同</li><li>对于String、File、Date和包装类等，都重写了Object的equals方法，不再比较地址，而是判断实体内容是否相同</li></ul></li><li><p>重写equals</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(this</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">User</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>== 和 equals 的区别</p><ul><li>==：运算符 <ul><li>使用范围：基本数据类型、引用数据类型</li><li>基本数据类型：判断数据值是否相等</li><li>引用数据类型：判断地址值是否相等</li></ul></li><li>equals：方法 <ul><li>使用范围：引用数据类型</li><li>类中的重写：不再判断地址值</li></ul></li></ul></li></ul></li><li><p>toString()的使用</p><ul><li><p>子类使用说明</p><ul><li>自定义的类，在没有重写Object.toStirng()方法时，默认打印的是当前对象的地址值</li><li>对于String、File、Date和包装类等，重写了toString()方法，打印的是实体内容</li></ul></li><li><p>重写toString</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User{name =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,age=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ol><h3 id="_7-7-复习" tabindex="-1">7.7-复习 <a class="header-anchor" href="#_7-7-复习" aria-hidden="true">#</a></h3><ol><li><p>this关键字的使用</p><ul><li>this调用的结构：属性、方法、构造器</li><li>this调用属性或方法：可以根据位置不同理解this为当前创建的对象或当前正在创建的对象</li><li>this调用构造器：this(形参列表)，必须放在首行</li></ul></li><li><p>面向对象的特征二—继承性</p><ul><li>继承性的好处： <ul><li>减少了代码的冗余，提高了复用性</li><li>提高了扩展性</li><li>为多态的使用提供了前提</li></ul></li><li>Java中继承性的特点 <ul><li>局限性：类的单继承性。后续可以通过类实现接口的方式，解决单继承性的缺点</li><li>支持多层继承，一个父类可以声明多个方法</li></ul></li><li>理解：子类继承父类的全部属性和方法，但是受封装性的影响，不能直接调用</li></ul></li><li><p>方法的重写</p><ul><li>重载和重写的区别 <ul><li>重载 <ul><li>同一个类、方法名相同</li><li>形参列表不同</li></ul></li><li>重写 <ul><li>类的继承关系</li><li>子类对父类同名同参数的方法的覆盖、覆写</li></ul></li></ul></li></ul></li><li><p>super关键字的使用</p><ul><li>super调用的结构：属性、方法、构造器</li><li>super调用属性或方法： <ul><li>子类中出现了和父类相同的属性，通过super.调用父类中的属性</li><li>子类重写了父类的方法，通过super.调用父类中的方法</li></ul></li><li>super调用构造器：子类构造器中使用super(参数列表)调用父类中的构造器，默认调用父类的空构造器</li></ul></li><li><p>面向对象的特征三—多态性</p><ul><li><p>子类对象的多态性、方法的重写</p></li><li><p>理解：父类的引用指向子类的对象</p></li><li><p>好处：减少了大量的重载方法的定义；开闭原则</p></li><li><p>使用：虚拟方法调用，编译看左边，执行看右边</p></li><li><p>注意：属性没有多态性</p></li><li><p>多态逆过程：向下转型、强转符、instanceof判断</p></li></ul></li><li><p>Object类的使用</p><ul><li>equals()方法 <ul><li>返回地址值比较的结果</li><li>重写后返回对象的实体内容比较的结果</li><li>== 和 equals</li></ul></li><li>toString()方法 <ul><li>返回当前对象所属的类和地址值</li><li>重写后返回当前对象的属性信息</li></ul></li></ul></li></ol><h2 id="_08-面向对象-高级" tabindex="-1">08-面向对象(高级) <a class="header-anchor" href="#_08-面向对象-高级" aria-hidden="true">#</a></h2><h3 id="_8-1-关键字-static" tabindex="-1">8.1-关键字：static <a class="header-anchor" href="#_8-1-关键字-static" aria-hidden="true">#</a></h3><ol><li><p>修饰的结构</p><ul><li>属性、方法、代码块、内部类</li></ul></li><li><p>static修饰属性</p></li></ol><ul><li>变量分类 <ul><li>成员变量 <ul><li>使用static修饰：静态变量、类变量</li><li>不使用static修饰：非静态变量、实例变量</li></ul></li><li>局部变量 <ul><li>方法内、方法形参、构造器内、构造器形参、代码块内</li></ul></li></ul></li><li>静态变量和实例变量的区别 <ul><li>个数 <ul><li>静态变量：内存空间中只有一份，被类的所有对象共享</li><li>实例变量：类的每一个实例对象都保存着一份实例变量</li></ul></li><li>内存位置 <ul><li>静态变量：jdk6之前，存放在方法区；jdk7及以后存放在堆空间</li><li>实例变量：存放在堆空间的对象实体中</li></ul></li><li>加载时机 <ul><li>静态变量：随着类的加载而加载，类只会加载一次，因此只有一份</li><li>实例对象：随着类的对象的创建而加载，每个对象都有一份</li></ul></li><li>调用者 <ul><li>静态变量：类和对象都可以直接调用</li><li>实例变量：只能使用对象进行调用</li></ul></li><li>消亡时机 <ul><li>静态变量：随着类的卸载而消亡</li><li>实例变量：随着对象的消亡而消亡</li></ul></li></ul></li></ul><ol start="3"><li>static修饰方法 <ul><li>可以通过 类.静态方法 的格式调用静态方法</li><li>静态方法内可以调用静态的方法或静态的属性</li><li>不可以调用非静态的结构（属性、方法）</li><li>static方法内不能使用 this 也不能使用 super</li></ul></li><li>什么时候需要将属性声明为静态的 <ul><li>类的多个实例共享此成员变量，且此成员变量的值是相同的</li><li>将一些常量声明为静态的，例：Math.PI</li></ul></li><li>什么时候需要将方法声明为静态的 <ul><li>对于静态变量的get和set方法，可以声明为静态的方法</li><li>将工具类中的方法声明为静态的，例：Arrays、Math</li></ul></li></ol><h3 id="_8-2-单例模式" tabindex="-1">8.2-单例模式 <a class="header-anchor" href="#_8-2-单例模式" aria-hidden="true">#</a></h3><ol><li><p>何为单例模式</p><ul><li>采用一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</li></ul></li><li><p>如何实现单例模式</p><ul><li><p>饿汉式</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BankTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Bank</span><span style="color:#A6ACCD;"> bank </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Bank</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bank</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 2. 类的内部创建当前类的实例，属性必须为static</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Bank</span><span style="color:#A6ACCD;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Bank</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 1. 类的构造器私有化</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Bank</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 3. 使用get方法获取当前类的实例，必须声明为static</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Bank</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> instance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>懒汉式</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GirlFriendTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">GirlFriend</span><span style="color:#A6ACCD;"> girlFriend </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> GirlFriend</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GirlFriend</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 2. 类的内部创建当前类的实例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">GirlFriend</span><span style="color:#A6ACCD;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 1. 类的构造器私有化</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GirlFriend</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 3. 提供对应的get方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">GirlFriend</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">instance </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            instance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GirlFriend</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> instance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>饿汉式和懒汉式对比</p><ul><li>饿汉式：立即加载，随着类的加载，当前的唯一实例就创建了 <ul><li>优点：写法简单，由于内存中较早加载，使用更方便、更快，线程安全</li><li>缺点：内存中占用时间较长</li></ul></li><li>懒汉式：延迟加载，在需要使用的时候，进行创建 <ul><li>优点：在需要的时候进行加载，节省内存空间</li><li>缺点：线程不安全</li></ul></li></ul></li></ol><h3 id="_8-3-类的成员四—代码块" tabindex="-1">8.3-类的成员四—代码块 <a class="header-anchor" href="#_8-3-类的成员四—代码块" aria-hidden="true">#</a></h3><ol><li>代码块的作用 <ul><li>用来初始化类或对象的信息（即初始化类或对象的成员的变量）</li></ul></li><li>代码块的修饰 <ul><li>只能使用static进行修饰</li></ul></li><li>代码块的分类 <ul><li>静态代码块</li><li>非静态代码块</li></ul></li><li>具体使用 <ul><li>静态代码块 <ul><li>随着类的加载而执行</li><li>由于类的加载只会执行一次，静态代码块也因此只会执行一次</li><li>用来初始化类的信息</li><li>内部可以声明变量、调用属性或方法、编写输出语句等操作</li><li>静态代码块内部只能调用静态的结构</li></ul></li><li>非静态代码块 <ul><li>随着对象的创建而执行</li><li>每创建当前类的实例，就会执行一次非静态代码块</li><li>用来初始化对象的信息</li><li>内部可以声明变量、调用属性或方法、编写输出语句等操作</li><li>非静态代码块内部可以调用静态和非静态的结构</li></ul></li></ul></li></ol><h3 id="_8-4-属性赋值的过程" tabindex="-1">8.4-属性赋值的过程 <a class="header-anchor" href="#_8-4-属性赋值的过程" aria-hidden="true">#</a></h3><ol><li>给类的非静态属性赋值的位置有： <ol><li>默认初始化</li><li>显式初始化</li><li>构造器中初始化</li><li>通过对象.属性赋值</li><li>代码块中初始化</li></ol></li></ol><h3 id="_8-5-关键字-final" tabindex="-1">8.5-关键字：final <a class="header-anchor" href="#_8-5-关键字-final" aria-hidden="true">#</a></h3><ol><li>final可以用来修饰的结构 <ul><li>类：表示该类不能被继承</li><li>方法：表示此方法不能被重写</li><li>变量：表示该变量为常量 <ul><li>成员变量：显式赋值、代码块、构造器</li><li>局部变量：在调用之前一定要赋值</li></ul></li></ul></li><li>final和static搭配使用 <ul><li>修饰成员变量时：全局常量，只有一个</li></ul></li></ol><h3 id="_8-6-关键字-abstract" tabindex="-1">8.6-关键字：abstract <a class="header-anchor" href="#_8-6-关键字-abstract" aria-hidden="true">#</a></h3><ol><li>可以修饰的结构 <ul><li>类：抽象类，不能实例化，可以有构造器</li><li>方法：抽象方法，只有方法的声明，没有方法体</li><li>抽象方法所在的类必须是抽象类</li></ul></li><li>不能与哪些关键字公用 <ul><li>private方法：私有方法不能被重写</li><li>static方法：避免静态方法通过类调用</li><li>final方法：不能被重写</li><li>final类：不能被继承</li></ul></li></ol><h3 id="_8-7-关键字-interface" tabindex="-1">8.7-关键字：interface <a class="header-anchor" href="#_8-7-关键字-interface" aria-hidden="true">#</a></h3><ol><li><p>接口的理解</p><ul><li>接口的本质是契约、标准、规范</li></ul></li><li><p>接口内部结构</p><ul><li>可以声明 <ul><li>属性：public static final</li><li>方法：public abstract 一般用于声明抽象方法；也可以声明静态方法、私有方法</li></ul></li><li>不可以声明 <ul><li>构造器</li><li>代码块</li></ul></li></ul></li><li><p>接口和类</p><ul><li><p>类相对于实现的接口：实现类</p></li><li><p>类可以实现多个接口</p></li><li><p>类针对于接口的多实现，一定程度上弥补了类的但继承性的缺点</p></li><li><p>类中必须将实现的接口中的所有抽象方法都重写，方可实例化</p></li></ul></li><li><p>接口和接口</p><ul><li>接口之间可以实现多继承</li></ul></li><li><p>接口的多态性</p><ul><li>接口 变量名 = new 实现类</li></ul></li><li><p>区分抽象类和接口</p><ul><li>共性 <ul><li>都可以声明抽象方法</li><li>都不能被实例化</li></ul></li><li>不同 <ul><li>抽象类有构造器，接口没有</li><li>类与类之间是继承关系，类与接口之间是实现关系</li></ul></li></ul></li><li><p>JDK8之后新特性</p><ul><li>静态方法 <ul><li>只能通过 接口名.方法调用</li><li>不能通过实现类调用</li></ul></li><li>默认方法 <ul><li>可以被实现类继承，可以重写此方法</li><li>实现两个接口，接口中定义了同名同参的方法 <ul><li>若没有重写，则会出现接口冲突</li></ul></li></ul></li><li>子类继承了父类，并实现了接口，若父类和接口中出现同名同参的方法 <ul><li>若没有重写，默认调用父类中的方法（类优先原则）</li></ul></li><li>调用接口中被重写的方法 <ul><li>单个接口 <ul><li>super.方法名</li></ul></li><li>多个接口 <ul><li>接口名.super.方法名</li></ul></li></ul></li><li>JDK9之后新特性 <ul><li>私有方法</li></ul></li></ul></li></ol><h3 id="_8-8-类的成员五—内部类" tabindex="-1">8.8-类的成员五—内部类 <a class="header-anchor" href="#_8-8-类的成员五—内部类" aria-hidden="true">#</a></h3><ol><li>内部类 <ul><li>将一个类A定义在另一个类B的内部，类A被称为内部类，类B被称为外部类</li></ul></li><li>内部类的分类 <ul><li>成员内部类 <ul><li>定义在外部类的里面 <ul><li>使用static修饰的，静态的成员内部类</li><li>不使用static修饰的，非静态的成员内部类</li></ul></li></ul></li><li>局部内部类 <ul><li>声明在方法内、构造期内、代码块内的内部类 <ul><li>匿名的局部内部类</li><li>非匿名的局部内部类</li></ul></li></ul></li></ul></li><li>关于成员内部类 <ul><li>从类的角度看 <ul><li>内部可以声明属性、方法、构造器、代码块、内部类</li><li>此内部类可以继承父类、实现接口</li><li>可以使用final和abstract修饰</li></ul></li><li>从外部类的成员看 <ul><li>在内部可以调用外部的结构，属性或方法等</li><li>除了使用public和缺省修饰符外，还可以使用private和protected修饰</li><li>可以使用static修饰</li></ul></li></ul></li><li>关于局部内部类 <ul><li>和成员内部类不同的是，不能有修饰符</li><li>如同局部变量一般，有作用域</li><li>是否可以访问外部的结构，取决于所在的方法</li></ul></li></ol><h3 id="_8-9-枚举类" tabindex="-1">8.9-枚举类 <a class="header-anchor" href="#_8-9-枚举类" aria-hidden="true">#</a></h3>`,45),c=l("ol",null,[l("li",null,[i("概述 "),l("ul",null,[l("li",null,"枚举类本质上也是一种类，只不过这个类的对象是有限的，固定的几个，不能让用户随意创建"),l("li",null,"例子：星期、性别、月份、季节、订单状态等，都是有限的"),l("li",null,"如果枚举类的实例只有一个，可以看做是单例的实现方式")])]),l("li",null,[i("定义枚举类 "),l("ul",null,[l("li",{提供对象实例:""},"定义：enum 类名"),l("li",null,"使用：类名.实例名.属性/方法"),l("li",null,"枚举类默认父类Enum")])]),l("li",null,[i("Enum常用的方法 "),l("ul",null,[l("li",null,"toString()：默认返回的是对象名，可以重写此方法"),l("li",null,"values()：返回枚举类型的对象数组，是一个静态方法，可以很快的遍历所有的枚举值（重点）"),l("li",null,"valuesOf(String name)：查找字符串对应的枚举类对象，找不到报错（重点）"),l("li",null,"String name()：返回当前枚举对象的名称"),l("li",null,"int ordinal()：返回当前枚举对象的次序号，默认从0开始")])]),l("li",null,[i("枚举类实现接口的情况 "),l("ul",null,[l("li",null,"让枚举类实现接口，在枚举类中重写接口中的抽象方法，通过不同的枚举对象调用此方法时，调用的是同一个方法"),l("li",null,"让枚举类中的对象重写接口中的抽象方法，通过不同的枚举对象调用此方法时，调用的是不同的方法")])])],-1),u=a(`<h3 id="_8-10-注解" tabindex="-1">8.10-注解 <a class="header-anchor" href="#_8-10-注解" aria-hidden="true">#</a></h3><ol><li>概述 <ul><li>注解可以看成是一种注释，通过使用Annotation，在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。</li><li>注解可以被编译器和其他程序读取，程序可以根据注解的不同，做出对应的处理</li></ul></li><li>应用场景 <ul><li>生成文档相关注释</li><li>在编译时进行格式检查（JDK内置的三个基本注解 ）</li><li>跟踪代码依赖性，实现替代配置文件功能</li></ul></li><li>三个基本注解 <ul><li>@Override：限定重写父类方法，只能用于方法</li><li>@Deprecated：用于表示所修饰的元素（类、方法）已经过时。通常是因为所修饰的结构危险或存在更好的选择。注：只是不建议使用，但还可以使用</li><li>@SuppressWarnings：抑制编译器警告</li></ul></li><li>元注解 <ul><li>对现有注解进行解释说明的注解 <ul><li>@Target：用于描述注解的使用范围</li><li>@Retention：用于描述注解的生命周期</li><li>@Documented：表示这个注解应该被javadoc工具记录</li><li>@Inherited：允许子类继承父类中的注解</li></ul></li></ul></li></ol><h3 id="_8-11-包装类" tabindex="-1">8.11-包装类 <a class="header-anchor" href="#_8-11-包装类" aria-hidden="true">#</a></h3><ol><li><p>概述</p><ul><li><p>包装类是针对于基本数据类型，使得基本数据类型有了类的特征</p></li><li><p>八种包装类：</p><table><thead><tr><th>数据类型</th><th>包装类</th><th>数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>float</td><td>Float</td></tr><tr><td>short</td><td>Short</td><td>double</td><td>Double</td></tr><tr><td>int</td><td>Integer</td><td>char</td><td>Character</td></tr><tr><td>long</td><td>Long</td><td>boolean</td><td>Boolean</td></tr></tbody></table></li><li><p>数值型包装类的父类为Number</p></li></ul></li><li><p>基本数据类型与包装类之间的转换</p><ul><li>基本数据类型 =&gt; 包装类 <ul><li>使用包装类的构造器；例：Integer i = new Interget(10)</li><li>使用valueOf()方法；例：Float f = new Float.valueOf(12.3F) （推荐使用）</li></ul></li><li>包装类 =&gt; 基本数据类型 <ul><li>使用xxxValue()；例：float f1 = f.floatValue();</li></ul></li></ul></li><li><p>自动装箱、自动拆箱</p><ul><li>Integer i = 10; int i1 = i;</li></ul></li><li><p>基本数据类型和包装类默认值的区别</p><ul><li>Boolean 和 boolean &lt;=&gt; null 和 false</li><li>Double 和 double &lt;=&gt; null 和 0.0</li></ul></li><li><p>基本数据类型、包装类转换为String</p><ul><li>基本数据类型、包装类 =&gt; String <ul><li>String.valueOf()；例：String s = String.valueOf()</li><li>+” “</li></ul></li><li>String =&gt; 基本数据类型、包装类 <ul><li>包装类的parseXXX()；例：int i = Integer.parseInt()</li></ul></li></ul></li><li><p>包装类对象的特点</p><ul><li><p>包装类缓存对象</p><table><thead><tr><th>包装类</th><th>缓存对象</th></tr></thead><tbody><tr><td>Byte</td><td>-128~127</td></tr><tr><td>Short</td><td>-128~127</td></tr><tr><td>Integer</td><td>-128~127</td></tr><tr><td>Long</td><td>-128~127</td></tr><tr><td>Float</td><td>没有</td></tr><tr><td>Double</td><td>没有</td></tr><tr><td>Character</td><td>0~127</td></tr><tr><td>Boolean</td><td>true和false</td></tr></tbody></table></li></ul></li></ol><h3 id="_8-12-复习" tabindex="-1">8.12-复习 <a class="header-anchor" href="#_8-12-复习" aria-hidden="true">#</a></h3><ol><li>关键字：static <ul><li>static：静态的，随着类的加载而加载、执行</li><li>static用来修饰：属性、方法、代码块、内部类</li><li>static修饰的属性和方法与不使用static修饰的区别 <ul><li>类属性：内存空间中只有一份，被所有实例对象共享</li><li>类方法：不可以调用非静态的结构，也不能使用this和super，不能被重写</li></ul></li></ul></li><li>单例模式 <ul><li>解决的问题：在整个软件系统中，只存在当前类的唯一实例</li><li>实现方式：饿汉式、懒汉式、枚举类等</li><li>对比饿汉式和懒汉式 <ul><li>饿汉式：立即加载、线程安全</li><li>懒汉式：延迟加载、线程不安全</li></ul></li></ul></li><li>类的成员四—代码块 <ul><li>根据static修饰，分为静态代码块和非静态代码块</li><li>静态代码块：随着类的加载而执行</li><li>非静态代码块：随着对象的创建而调用</li><li>属性的赋值位置：</li></ul></li><li>关键字：final <ul><li>用来修饰：类、方法、变量 <ul><li>类：不能被继承</li><li>方法：不能被重写</li><li>变量：一旦赋值不能被更改</li></ul></li></ul></li><li>关键字：abstract <ul><li>用来修饰：类、方法 <ul><li>类：不能被实例化</li><li>方法：不能有方法体，必须由子类重写此方法</li></ul></li></ul></li><li>关键字：interface <ul><li>用来定义规范的</li><li>接口中可以声明的结构 <ul><li>属性：public static final</li><li>方法：public abstract；jdk8：static、default方法；jdk9：private</li></ul></li></ul></li><li>类的成员之五：内部类 <ul><li>成员内部类 <ul><li>从类的角度看 <ul><li>可以声明属性、方法、构造器、代码块、内部类等结构</li><li>可以继承父类，实现接口</li><li>可以使用final修饰</li><li>可以被abstract修饰</li></ul></li><li>从外部类的成员看 <ul><li>可以调用外部类的结构：属性、方法</li><li>可以使用static修饰</li><li>除了public和缺省外，还可以使用private和protected修饰</li></ul></li></ul></li><li>局部内部类</li></ul></li><li>枚举类</li><li>注解</li><li>包装类 <ul><li>基本数据类型、包装类、String之间的数据转换 <ul><li>基本数据类型 &lt;=&gt; 包装类：自动拆箱、自动装箱</li><li>基本数据类型、包装类 &lt;=&gt; String： <ul><li>String的valueOf(xx)</li><li>包装类的parseXXX(String xx)</li></ul></li></ul></li></ul></li></ol><h2 id="_09-异常处理" tabindex="-1">09-异常处理 <a class="header-anchor" href="#_09-异常处理" aria-hidden="true">#</a></h2><h3 id="_9-1-常见错误和异常" tabindex="-1">9.1-常见错误和异常 <a class="header-anchor" href="#_9-1-常见错误和异常" aria-hidden="true">#</a></h3><ol><li>Throwable <ul><li>java.lang.Throwable类是java程序运行过程中发生的异常事件对应的类的根父类</li><li>Throwable中常用的方法： <ul><li>public void printStackTrace()：打印异常的详细信息，包括异常类型、原因、出现的位置</li><li>public String getMessage()：获取发生异常的原因</li></ul></li></ul></li><li>Error和Exception <ul><li>Error：对应java.lang.Error类 <ul><li>java虚拟机无法解决的严重问题。一般不编写针对性的代码进行处理 <ul><li>StackOverFlowError：栈溢出</li><li>OutOfMemoryError：堆溢出</li></ul></li></ul></li><li>Exception：对应java.lang.Exception类 <ul><li>因编程错误或偶然的外部因素导致的一般性问题，需要使用针对性的代码进行处理，否则程序也会挂</li><li>运行时异常 <ul><li>NullPointerException：空指针异常</li><li>ArrayIndexOutOfBoundsException：数组角标越界</li><li>ClassCastException：强转异常；Date date = (Date) obj</li><li>NumberFormatException 数字格式异常；String 123a 转 int</li><li>InputMismatchException 输入不匹配异常；接收int，输入字符串</li><li>ArithmeticException 算术异常；除以0</li></ul></li><li>编译时异常 <ul><li>ClassNotFoundException</li><li>FileNotFoundException</li><li>IOException</li></ul></li></ul></li></ul></li></ol><h3 id="_9-2-异常的处理" tabindex="-1">9.2-异常的处理 <a class="header-anchor" href="#_9-2-异常的处理" aria-hidden="true">#</a></h3><ol><li><p>异常处理方式一：try-catch-finally</p><ul><li><p>执行过程</p><ul><li>过程1：程序在执行的过程中，一旦出现异常，就会在异常的代码处，生成对应异常类的对象，并将此对象抛出，一旦抛出，此程序就不再执行其后的代码了</li><li>过程2：针对于过程1抛出的异常对象，进行捕获处理，一旦将异常进行了处理，代码就可以继续执行了</li></ul></li><li><p>基本结构</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 可能出现异常的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">异常类型1 </span><span style="color:#C792EA;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当产生异常类型1时的处置措施</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">异常类型2 </span><span style="color:#C792EA;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当产生异常类型2时的处置措施</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 无论是否发生异常，都无条件执行的语句</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>使用细节</p><ul><li>将可能出现的异常声明在try中，一旦代码出现异常，就会自动生成一个对应的异常类对象，并抛出</li><li>针对于try中抛出的异常类对象，使用catch语句进行匹配，一旦匹配到，就进入catch语句块处理</li><li>如果声明了多个catch结构，不同的异常类型在不存在子父类的情况下，谁声明在上、在下都可以；如果多个异常类型满足父子类的关系，则必须将子类声明在父类的上面，否则报错</li></ul></li><li><p>catch中异常处理的方式</p><ul><li>自己编写输出的语句</li><li>printStackTrace()：打印异常的详细信息（推荐）</li><li>getMessage()：获取发生异常的原因</li></ul></li><li><p>开发体会</p><ul><li>对于运行时异常，通常不使用异常处理，直接根据异常结果修改代码即可</li><li>对于编译时异常，一定要处理，否则编译不通过</li></ul></li><li><p>finally使用</p><ul><li>finally理解 <ul><li>将一定会执行的代码写在finally中</li><li>无论try..catch中是否存在未被处理的异常或存在return，finally中的语句一定会被执行</li><li>例外：System.exit(0)执行，程序结束，finally不再执行</li><li>finally不能单独定义，必须结合try...catch使用</li></ul></li><li>使用场景 <ul><li>开发中有一些资源（输入流、输出流、数据库连接、Sorcket连接等资源），在使用完之后，必须显示的进行关闭操作，否则，GC不会自动回收这些资源，进而导致内存的泄露</li><li>为了保证这些资源在使用完成之后，不管是否出现未被处理异常的情况下，这些资源都能关闭，我们必须这些关闭操作声明在finally中</li></ul></li></ul></li></ul></li><li><p>异常处理方式二：throws</p><ul><li>格式：在方法的声明时，使用 throws 异常类型1，异常类型2....</li><li>处理异常 <ul><li>将异常抛给调用此方法的地方去解决，没有真正解决异常</li></ul></li><li>方法重写的要求 <ul><li>子类重写的方法抛出的异常类型可以与父类被重写方法抛出的异常类型相同，或是父类被重写方法抛出的异常类型的子类</li><li>因为真正使用try...catch解决异常时，是解决父类的异常（编译看左边），若运行时子类抛出更大的异常，解决不了</li></ul></li></ul></li><li><p>开发中如何选择两种异常处理方式（重要）</p><ul><li>涉及到资源的调用：try...catch...finally</li><li>父类被重写的方法没有throws异常类型，子类重写的方法出现了异常：try...catch...finally</li><li>方法a中调用了b、c、d方法：a中使用try...catch...finally，b、c、d中使用throws抛给a统一解决</li></ul></li></ol><h3 id="_9-3-手动抛出异常" tabindex="-1">9.3-手动抛出异常 <a class="header-anchor" href="#_9-3-手动抛出异常" aria-hidden="true">#</a></h3><ol><li>手动抛出异常场景 <ul><li>实际开发中，不满足具体场景的代码问题，手动抛出指定类型的异常对象</li></ul></li><li>语法格式：throw new 异常类型()</li></ol><h3 id="_9-4-自定义异常类" tabindex="-1">9.4-自定义异常类 <a class="header-anchor" href="#_9-4-自定义异常类" aria-hidden="true">#</a></h3><ol><li>如何自定义异常类 <ul><li>继承于现有的异常体系。通常继承于Exception或RuntimeException</li><li>通常提供几个重载的构造器，接收异常信息</li><li>提供一个全局常量，声明为：static final long serialVersionUID = -43475984723957589437L;</li></ul></li><li>为什么需要自定义异常类 <ul><li>通过异常的名称就能直接判断此异常的原因</li><li>不满足我们指定的条件时，指明我们特有的异常类，从而判断出具体出现的问题</li></ul></li></ol><h3 id="_9-5-复习" tabindex="-1">9.5-复习 <a class="header-anchor" href="#_9-5-复习" aria-hidden="true">#</a></h3><ol><li>异常的概述 <ul><li>什么是异常 <ul><li>程序在执行过程中，出现的非正常情况，如果不处理会导致JVM的非正常停止</li></ul></li><li>异常的抛出机制 <ul><li>Java中把不同的异常用不同的类表示，一旦发生某种异常，就创建该异常类对象，并抛出，程序员可以捕获这个异常，并进行处理；如果没有捕获这个异常对象，那么这个异常对象将会致程序终止</li></ul></li></ul></li><li>异常的体系结构及常见异常 <ul><li>Throwable异常体系的父类</li><li>Error：错误，JVM系统内部错误，资源耗尽等严重情况，一般不编写代码进行处理 <ul><li>StackOverflowError(栈溢出)、OutOfMemoryError(堆溢出)</li></ul></li><li>Exception：异常，我们可以编写针对性代码进行处理 <ul><li>运行时异常 <ul><li>ArrayIndexOutOfBoundsException</li><li>NullPointerException</li><li>ClassCastException</li><li>NumberFormatException</li><li>InputMismatchException</li><li>ArithmeticException</li></ul></li><li>编译时异常 <ul><li>ClassNotFoundException</li><li>FileNotFoundException</li><li>IOException</li></ul></li></ul></li></ul></li><li>异常的处理方式 <ul><li>try-catch-finally</li><li>throws</li></ul></li><li>手动抛出异常对象 <ul><li>throw new 异常对象</li></ul></li><li>如何自定义异常类 <ul><li>定义一个类继承异常类</li><li>提供几个重载的构造器</li><li>提供一个全局常量声明为 public static final long serialVersionUID:</li></ul></li></ol><h2 id="_10-多线程" tabindex="-1">10-多线程 <a class="header-anchor" href="#_10-多线程" aria-hidden="true">#</a></h2><h3 id="_10-1-相关概念" tabindex="-1">10.1-相关概念 <a class="header-anchor" href="#_10-1-相关概念" aria-hidden="true">#</a></h3><ol><li>程序、进程、线程的区分 <ul><li>程序：为完成特定任务，用某种语言编写的一组指令的集合，即指一段静态的代码</li><li>进程：程序的一次执行过程，或是正在内存中运行的应用程序。程序是静态的，进程是动态的。 <ul><li>进程作为操作系统调度和分配资源的最小单位</li></ul></li><li>线程：进程可进一步细化为线程，是程序内部的一条执行路径 <ul><li>线程作为CPU调度和执行的最小单位</li></ul></li></ul></li><li>线程调度策略 <ul><li>分时调度：所有线程轮流使用CPU，并且平均分配每个线程占用CPU的时间</li><li>抢占式调度：让优先级高的线程以较大的概率优先使用CPU，若优先级相同，则随机选择一个线程</li></ul></li></ol><h3 id="_10-2-创建和启动线程" tabindex="-1">10.2-创建和启动线程 <a class="header-anchor" href="#_10-2-创建和启动线程" aria-hidden="true">#</a></h3><ol><li>概述 <ul><li>java.lang.Thread类代表线程，所有线程都必须是Thread类或其子类的实例</li></ul></li><li>创建方式 <ul><li>继承Thread类 <ul><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run方法；将此线程要执行的操作，声明在此方法体中</li><li>创建当前Thread子类的对象</li><li>通过对象调用start()，启动线程，调用当前线程的run()</li></ul></li><li>实现Runnable接口 <ul><li>创建一个实现Runnable接口的类</li><li>实现接口中的run方法，将此线程要执行的操作，声明在此方法体中</li><li>创建当前类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的实例</li><li>Thread类的实例调用start()，启动线程，调用当前线程的run()</li></ul></li></ul></li><li>对比两种创建方式 <ul><li>共同点 <ul><li>启动线程：使用Thread类中的start()</li><li>创建的线程对象都是Thread或其子类的对象</li></ul></li><li>不同点 <ul><li>一个是类的继承</li><li>一个是接口的实现 <ul><li>避免类的单继承的局限性</li><li>更适合来处理有共享数据的问题</li><li>实现了数据和代码的分离</li></ul></li></ul></li></ul></li></ol><h3 id="_10-3-线程的常用方法与生命周期" tabindex="-1">10.3-线程的常用方法与生命周期 <a class="header-anchor" href="#_10-3-线程的常用方法与生命周期" aria-hidden="true">#</a></h3><ol><li><p>线程中的构造器</p><ul><li>public Thread()：分配一个新的线程对象</li><li>public Thread(String name)：分配一个指定名字的线程对象</li><li>public Thread(Runnable target)：指定创建线程的目标对象，它实现了Runnable接口中的run方法</li><li>public Thread(Runnable target, String name)：分配一个带有指定目标新的线程对象并指定名字</li></ul></li><li><p>线程中的常用方法</p><ul><li>start()：启动线程，调用线程的run方法</li><li>run()：将线程要执行的操作，声明在run方法中</li><li>currentThread()：获取当前执行代码对应的线程</li><li>getName()：获取当前线程的名称</li><li>setName()：更改当前线程的名称</li><li>sleep(long millis)：静态方法，延迟当前线程执行，指定延迟时间</li><li>yield()：一旦执行此方法，主动释放CPU执行权</li><li>join()：在线程a中通过线程b调用join()，意味着线程a进入线程阻塞状态，知道线程b执行结束，才执行a</li><li>isAlive()：判断线程是否存活，返回一个Boolean值</li></ul></li><li><p>过时方法</p><ul><li>stop()：强行使线程进入死亡状态，不建议使用</li><li>suspend() / resume()：暂停和恢复</li></ul></li><li><p>优先级</p><ul><li>getPriority()：获取当前线程的优先级</li><li>setPriority()：设置线程优先级，设置范围1-10</li></ul></li><li><p>线程的生命周期</p></li></ol>`,24),d=[p,r,o,c,u];function h(y,D,A,C,F,_){return e(),n("div",null,d)}const b=s(t,[["render",h]]);export{v as __pageData,b as default};
