import{_ as l,c as i,o as e,d as a}from"./app.c282a12f.js";const g=JSON.parse('{"title":"索引","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-说一说你对MySQL索引的理解","slug":"_01-说一说你对mysql索引的理解","link":"#_01-说一说你对mysql索引的理解","children":[]},{"level":2,"title":"02-索引有哪几种？","slug":"_02-索引有哪几种","link":"#_02-索引有哪几种","children":[]},{"level":2,"title":"03-MySQL怎么判断要不要加索引？","slug":"_03-mysql怎么判断要不要加索引","link":"#_03-mysql怎么判断要不要加索引","children":[]},{"level":2,"title":"04-只要创建了索引，就一定会走索引吗？","slug":"_04-只要创建了索引-就一定会走索引吗","link":"#_04-只要创建了索引-就一定会走索引吗","children":[]},{"level":2,"title":"05-如何评估一个索引创建的是否合理？","slug":"_05-如何评估一个索引创建的是否合理","link":"#_05-如何评估一个索引创建的是否合理","children":[]},{"level":2,"title":"06-数据库索引失效了怎么办？","slug":"_06-数据库索引失效了怎么办","link":"#_06-数据库索引失效了怎么办","children":[]},{"level":2,"title":"07-所有的字段都适合创建索引吗？","slug":"_07-所有的字段都适合创建索引吗","link":"#_07-所有的字段都适合创建索引吗","children":[]},{"level":2,"title":"08-MySQL的Hash索引和B树索引有什么区别？","slug":"_08-mysql的hash索引和b树索引有什么区别","link":"#_08-mysql的hash索引和b树索引有什么区别","children":[]}],"relativePath":"Java/interview_java/数据库/索引.md"}'),h={name:"Java/interview_java/数据库/索引.md"},r=a('<h1 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-hidden="true">#</a></h1><h2 id="_01-说一说你对mysql索引的理解" tabindex="-1">01-说一说你对MySQL索引的理解 <a class="header-anchor" href="#_01-说一说你对mysql索引的理解" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>索引是一个单独的、存储在磁盘上的数据库结构，包含着对数据表里所有记录的引用指针。使用索引可以快速找出在某个或多个列中有一特定值的行，所有MySQL列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。</p><p>索引是在存储引擎中实现的，因此，每种存储引擎的索引都不一定完全相同，并且每种存储引擎也不一定支持所有索引类型。MySQL中索引的存储类型有两种，即BTREE和HASH，具体和表的存储引擎相关。MyISAM和InnoDB存储引擎只支持BTREE索引；MEMORY/HEAP存储引擎可以支持HASH和BTREE索引。</p><p>索引的优点主要有以下几条：</p><ol><li>通过创建唯一索引，可以保证数据库表中每一行数据的唯一性。</li><li>可以大大加快数据的查询速度，这也是创建索引的主要原因。</li><li>在实现数据的参考完整性方面，可以加速表和表之间的连接。</li><li>在使用分组和排序子句进行数据查询时，也可以显著减少查询中分组和排序的时间。</li></ol><p>增加索引也有许多不利的方面，主要表现在如下几个方面：</p><ol><li>创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加。</li><li>索引需要占磁盘空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</li></ol><h2 id="_02-索引有哪几种" tabindex="-1">02-索引有哪几种？ <a class="header-anchor" href="#_02-索引有哪几种" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>MySQL的索引可以分为以下几类：</p><ol><li><p>普通索引和唯一索引</p><p>普通索引是MySQL中的基本索引类型，允许在定义索引的列中插入重复值和空值。</p><p>唯一索引要求索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p><p>主键索引是一种特殊的唯一索引，不允许有空值。</p></li><li><p>单列索引和组合索引</p><p>单列索引即一个索引只包含单个列，一个表可以有多个单列索引。</p><p>组合索引是指在表的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用。使用组合索引时遵循最左前缀集合。</p></li><li><p>全文索引</p><p>全文索引类型为FULLTEXT，在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文索引可以在CHAR、VARCHAR或者TEXT类型的列上创建。</p></li><li><p>空间索引</p><p>空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING和POLYGON。MySQL使用SPATIAL关键字进行扩展，使得能够用创建正规索引类似的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，空间索引只能在存储引擎为MyISAM的表中创建。</p></li></ol><h2 id="_03-mysql怎么判断要不要加索引" tabindex="-1">03-MySQL怎么判断要不要加索引？ <a class="header-anchor" href="#_03-mysql怎么判断要不要加索引" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>建议按照如下的原则来创建索引：</p><ol><li>当唯一性是某种数据本身的特征时，指定唯一索引。使用唯一索引需能确保定义的列的数据完整性，以提高查询速度。</li><li>在频繁进行排序或分组（即进行group by或order by操作）的列上建立索引，如果待排序的列有多个，可以在这些列上建立组合索引。</li></ol><h2 id="_04-只要创建了索引-就一定会走索引吗" tabindex="-1">04-只要创建了索引，就一定会走索引吗？ <a class="header-anchor" href="#_04-只要创建了索引-就一定会走索引吗" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>不一定。</p><p>比如，在使用组合索引的时候，如果没有遵从“最左前缀”的原则进行搜索，则索引是不起作用的。</p><p>举例，假设在id、name、age字段上已经成功建立了一个名为MultiIdx的组合索引。索引行中按id、name、age的顺序存放，索引可以搜索id、（id,name）、（id, name, age）字段组合。如果列不构成索引最左面的前缀，那么MySQL不能使用局部索引，如（age）或者（name,age）组合则不能使用该索引查询。</p><h2 id="_05-如何评估一个索引创建的是否合理" tabindex="-1">05-如何评估一个索引创建的是否合理？ <a class="header-anchor" href="#_05-如何评估一个索引创建的是否合理" aria-hidden="true">#</a></h2><p>建议按照如下的原则来设计索引：</p><ol><li>避免对经常更新的表进行过多的索引，并且索引中的列要尽可能少。应该经常用于查询的字段创建索引，但要避免添加不必要的字段。</li><li>数据量小的表最好不要使用索引，由于数据较少，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</li><li>在条件表达式中经常用到的不同值较多的列上建立索引，在不同值很少的列上不要建立索引。比如在学生表的“性别”字段上只有“男”与“女”两个不同值，因此就无须建立索引，如果建立索引不但不会提高查询效率，反而会严重降低数据更新速度。</li><li>当唯一性是某种数据本身的特征时，指定唯一索引。使用唯一索引需能确保定义的列的数据完整性，以提高查询速度。</li><li>在频繁进行排序或分组（即进行group by或order by操作）的列上建立索引，如果待排序的列有多个，可以在这些列上建立组合索引。</li></ol><h2 id="_06-数据库索引失效了怎么办" tabindex="-1">06-数据库索引失效了怎么办？ <a class="header-anchor" href="#_06-数据库索引失效了怎么办" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>可以采用以下几种方式，来避免索引失效：</p><ol><li>使用组合索引时，需要遵循“最左前缀”原则；</li><li>不在索引列上做任何操作，例如计算、函数、类型转换，会导致索引失效而转向全表扫描；</li><li>尽量使用覆盖索引（之访问索引列的查询），减少 select * 覆盖索引能减少回表次数；</li><li>MySQL在使用不等于（!=或者&lt;&gt;）的时候无法使用索引会导致全表扫描；</li><li>LIKE以通配符开头（%abc）MySQL索引会失效变成全表扫描的操作；</li><li>字符串不加单引号会导致索引失效（可能发生了索引列的隐式转换）；</li><li>少用or，用它来连接时会索引失效。</li></ol><h2 id="_07-所有的字段都适合创建索引吗" tabindex="-1">07-所有的字段都适合创建索引吗？ <a class="header-anchor" href="#_07-所有的字段都适合创建索引吗" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>不是。</p><p>下列几种情况，是不适合创建索引的：</p><ol><li>频繁更新的字段不适合建立索引；</li><li>where条件中用不到的字段不适合建立索引；</li><li>数据比较少的表不需要建索引；</li><li>数据重复且分布比较均匀的的字段不适合建索引，例如性别、真假值；</li><li>参与列计算的列不适合建索引。</li></ol><h2 id="_08-mysql的hash索引和b树索引有什么区别" tabindex="-1">08-MySQL的Hash索引和B树索引有什么区别？ <a class="header-anchor" href="#_08-mysql的hash索引和b树索引有什么区别" aria-hidden="true">#</a></h2><p><strong>参考答案</strong></p><p>hash索引底层就是hash表，进行查找时，调用一次hash函数就可以获取到相应的键值，之后进行回表查询获得实际数据。B+树底层实现是多路平衡查找树，对于每一次的查询都是从根节点出发，查找到叶子节点方可以获得所查键值，然后根据查询判断是否需要回表查询数据。它们有以下的不同：</p><ul><li>hash索引进行等值查询更快(一般情况下)，但是却无法进行范围查询。因为在hash索引中经过hash函数建立索引之后，索引的顺序与原顺序无法保持一致，不能支持范围查询。而B+树的的所有节点皆遵循(左节点小于父节点，右节点大于父节点，多叉树也类似)，天然支持范围。</li><li>hash索引不支持使用索引进行排序，原理同上。</li><li>hash索引不支持模糊查询以及多列索引的最左前缀匹配，原理也是因为hash函数的不可预测。</li><li>hash索引任何时候都避免不了回表查询数据，而B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通过索引完成查询。</li><li>hash索引虽然在等值查询上较快，但是不稳定，性能不可预测，当某个键值存在大量重复的时候，发生hash碰撞，此时效率可能极差。而B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子节点，且树的高度较低。</li></ul><p>因此，在大多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。而不需要使用hash索引。</p>',39),s=[r];function t(n,p,d,o,_,c){return e(),i("div",null,s)}const u=l(h,[["render",t]]);export{g as __pageData,u as default};
