import{_ as l,c as i,o as e,d as t}from"./app.c282a12f.js";const p=JSON.parse('{"title":"性能","description":"","frontmatter":{},"headers":[{"level":2,"title":"01-前端性能优化方案","slug":"_01-前端性能优化方案","link":"#_01-前端性能优化方案","children":[]}],"relativePath":"Web/interview/前端进阶/性能.md"}'),a={name:"Web/interview/前端进阶/性能.md"},n=t('<h1 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-hidden="true">#</a></h1><h2 id="_01-前端性能优化方案" tabindex="-1">01-前端性能优化方案 <a class="header-anchor" href="#_01-前端性能优化方案" aria-hidden="true">#</a></h2><ol><li>加载优化 <ul><li>减少HTTP请求：尽量减少页面的请求数(首次加载同时请求数不能超过4个) <ul><li>合并CSS和JS</li><li>使用CSS精灵图</li></ul></li><li>缓存资源：使用缓存减少向服务器的请求书 <ul><li>缓存一切可缓存的资源</li><li>使用外联的样式和脚本</li></ul></li><li>压缩代码：减少资源大小可加快网页显示速度 <ul><li>压缩代码（多余的缩进、空格和换行符）</li><li>服务端设置Gzip</li></ul></li><li>按需加载：将不影响首屏的资源和当前屏幕不用的资源放到用户需要时才加载 <ul><li>懒加载</li><li>滚屏加载</li></ul></li><li>预加载：大型资源页面可使用Loading，资源加载完成之后再显示页面</li><li>压缩图像 <ul><li>使用TinyJpg和TinyPng压缩图像</li><li>使用CSS3、SVG、IconFont代替图像</li><li>使用img的srcset按需加载图像</li></ul></li></ul></li><li>执行优化 <ul><li>CSS写在头部，JS写在尾部并异步</li><li>避免img、iframe的src为空</li></ul></li><li>渲染优化 <ul><li>设置viewport</li><li>减少DOM节点</li><li>优化动画 <ul><li>尽量使用CSS3动画</li><li>适当使用Canvas动画</li></ul></li><li>优化高频事件 <ul><li>函数节流</li><li>函数防抖</li></ul></li><li>GPU加速</li></ul></li><li>样式优化 <ul><li>避免在HTML中书写style</li><li>避免CSS表达式</li><li>不滥用float</li><li>不声明过多的font-size</li></ul></li><li>脚本优化 <ul><li>减少重绘和回流 <ul><li>避免不必要的DOM操作</li><li>尽量改变class而不是style</li><li>不使用table布局</li></ul></li><li>尽量使用事件代理</li><li>缓存.length的值</li></ul></li></ol>',3),r=[n];function s(u,_,o,c,d,S){return e(),i("div",null,r)}const f=l(a,[["render",s]]);export{p as __pageData,f as default};
